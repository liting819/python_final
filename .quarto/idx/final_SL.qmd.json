{"title":"30538 Final Project","markdown":{"yaml":{"title":"30538 Final Project","author":"Sohyun Lim and Ting Tsai","date":"2024-12-05","format":{"pdf":{"include-in-header":{"text":"\\usepackage{fvextra}\n\\usepackage[margin=1in]{geometry}\n\\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}\n"}}},"include-before-body":{"text":"\\RecustomVerbatimEnvironment{verbatim}{Verbatim}{\n  showspaces = false,\n  showtabs = false,\n  breaksymbolleft={},\n  breaklines\n}\n"}},"headingText":"1. Load the dataset","containsRefs":false,"markdown":"\n\n```{python}\nimport pandas as pd\n\n# 1. Load the dataset.\nfile_path = \"/Users/sohyunlim/Desktop/python - final/Public_Health_Statistics_-_Selected_public_health_indicators_by_Chicago_community_area_-_Historical_20241031.csv\"\ndata = pd.read_csv(file_path)\ndata.head()\n\n\n# 2. Change the variable names.\n# Replace parentheses with empty strings, hyphens with underscores, and spaces with underscores in column names\ndata.columns = data.columns.str.replace(r\"[()]\", \"\", regex=True).str.replace(\"-\", \"_\").str.replace(\" \", \"_\").str.lower()\nprint(data.columns)\n\n\n# 3. Remove unncessary columns.\ncolumns_to_drop = [\n    \"childhood_blood_lead_level_screening\",\n    \"childhood_lead_poisoning\",\n    \"gonorrhea_in_females\"\n]\ndata = data.drop(columns=columns_to_drop)\nprint(data.columns)\n```\n\n# 3. Basic Plots (table and graph)\n# To explore the community area by health outcomes and socioeconomic factors\n# 3-1. Create a table of cancer_all_sites (descending) by community area\n# 3-2. Create a table of diabetes_related (descending) by community area\n# 3-3. Create a table of tuberculosis (descending) by community area\n# 3-4. Create a table of below_poverty_level (descending) by community area\n# 3-5. Create a table of no_high_school_diploma (descending) by community area\n# 3-6. Create a table of per_capita_income (descending) by community area\n# 3-7. Create a table of unemployment (descending) by community area\n\n```{python}\n# 3-1. Create a table of cancer_all_sites (descending) by community area\nimport pandas as pd\nimport altair as alt\n\n# Select necessary columns from dataframe\ncancer_table = data[[\"community_area\", \"community_area_name\", \"cancer_all_sites\"]].copy()\n\n# Drop na and arrange by descending\ncancer_table = cancer_table.dropna(subset=[\"cancer_all_sites\"])\ncancer_table = cancer_table.sort_values(by=\"cancer_all_sites\", ascending=False)\n\n# Initiate index\ncancer_table.reset_index(drop=True, inplace=True)\n\n# Print the result\nprint(cancer_table)\n\n\n# 3-2. Create a table of diabetes_related (descending) by community area\n# Select necessary columns from dataframe\ndiabetes_table = data[[\"community_area\", \"community_area_name\", \"diabetes_related\"]].copy()\n\n# Drop na and arrange by descending\ndiabetes_table = diabetes_table.dropna(subset=[\"diabetes_related\"])\ndiabetes_table = diabetes_table.sort_values(by=\"diabetes_related\", ascending=False)\n\n# Initiate index\ndiabetes_table.reset_index(drop=True, inplace=True)\n\n# Print the result\nprint(diabetes_table)\n\n# 3-3. Create a table of tuberculosis (descending) by community area\n# Select necessary columns from dataframe\ntuberculosis_table = data[[\"community_area\", \"community_area_name\", \"tuberculosis\"]].copy()\n\n# Drop na and arrange by descending\ntuberculosis_table = tuberculosis_table.dropna(subset=[\"tuberculosis\"])\ntuberculosis_table = tuberculosis_table.sort_values(by=\"tuberculosis\", ascending=False)\n\n# Initiate index\ntuberculosis_table.reset_index(drop=True, inplace=True)\n\n# Print the result\nprint(tuberculosis_table)\n\n\n# 3-4. Create a table of below_poverty_level (descending) by community area\n# Select necessary columns from dataframe\npoverty_table = data[[\"community_area\", \"community_area_name\", \"below_poverty_level\"]].copy()\n\n# Drop na and arrange by descending\npoverty_table = poverty_table.dropna(subset=[\"below_poverty_level\"])\npoverty_table = poverty_table.sort_values(by=\"below_poverty_level\", ascending=False)\n\n# Initiate index\npoverty_table.reset_index(drop=True, inplace=True)\n\n# Print the result\nprint(poverty_table)\n\n\n# 3-5. Create a table of no_high_school_diploma (descending) by community area\n# Select necessary columns from dataframe\neducation_table = data[[\"community_area\", \"community_area_name\", \"no_high_school_diploma\"]].copy()\n\n# Drop na and arrange by descending\neducation_table = education_table.dropna(subset=[\"no_high_school_diploma\"])\neducation_table = education_table.sort_values(by=\"no_high_school_diploma\", ascending=False)\n\n# Initiate index\neducation_table.reset_index(drop=True, inplace=True)\n\n# Print the result\nprint(education_table)\n\n\n# 3-6. Create a table of per_capita_income (descending) by community area\n# Select necessary columns from dataframe\nincome_table = data[[\"community_area\", \"community_area_name\", \"per_capita_income\"]].copy()\n\n# Drop na and arrange by descending\nincome_table = income_table.dropna(subset=[\"per_capita_income\"])\nincome_table = income_table.sort_values(by=\"per_capita_income\", ascending=False)\n\n# Initiate index\nincome_table.reset_index(drop=True, inplace=True)\n\n# Print the result\nprint(income_table)\n\n\n# 3-7. Create a table of unemployment (descending) by community area\n# Select necessary columns from dataframe\nunemployment_table = data[[\"community_area\", \"community_area_name\", \"unemployment\"]].copy()\n\n# Drop na and arrange by descending\nunemployment_table = unemployment_table.dropna(subset=[\"unemployment\"])\nunemployment_table = unemployment_table.sort_values(by=\"unemployment\", ascending=False)\n\n# Initiate index\nunemployment_table.reset_index(drop=True, inplace=True)\n\n# Print the result\nprint(unemployment_table)\n```\n\n# Select top 10 areas in each table and converty it into a graph.\n# 3-8. Create a table of cancer_all_sites (descending) by community area\n# 3-9. Create a table of diabetes_related (descending) by community area\n# 3-10. Create a table of tuberculosis (descending) by community area\n# 3-11. Create a table of below_poverty_level (descending) by community area\n# 3-12. Create a table of no_high_school_diploma (descending) by community area\n# 3-13. Create a table of per_capita_income (descending) by community area\n# 3-14. Create a table of unemployment (descending) by community area\n\n```{python}\n# 3-8. Create a table of cancer_all_sites (descending) by community area\n# Extractn top 10 community areas\ntop_10_cancer_areas = cancer_table.head(10)\n\n# Create a bar chart\nbar_chart_cancer = alt.Chart(top_10_cancer_areas).mark_bar().encode(\n    x=alt.X(\"cancer_all_sites:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"cancer_all_sites\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Cancer Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_cancer.show()\n\n\n# 3-9. Create a table of diabetes_related (descending) by community area\n# Extractn top 10 community areas\ntop_10_diabetes_areas = diabetes_table.head(10)\n\n# Create a bar chart\nbar_chart_diabetes = alt.Chart(top_10_diabetes_areas).mark_bar().encode(\n    x=alt.X(\"diabetes_related:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"diabetes_related\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Diabetes Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_diabetes.show()\n\n\n# 3-10. Create a table of tuberculosis (descending) by community area\n# Extractn top 10 community areas\ntop_10_tuberculosis_areas = tuberculosis_table.head(10)\n\n# Create a bar chart\nbar_chart_tuberculosis = alt.Chart(top_10_tuberculosis_areas).mark_bar().encode(\n    x=alt.X(\"tuberculosis:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"tuberculosis\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Tuberculosis Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_tuberculosis.show()\n\n\n# 3-11. Create a table of below_poverty_level (descending) by community area\n# Extractn top 10 community areas\ntop_10_poverty_areas = poverty_table.head(10)\n\n# Create a bar chart\nbar_chart_poverty = alt.Chart(top_10_poverty_areas).mark_bar().encode(\n    x=alt.X(\"below_poverty_level:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"below_poverty_level\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Poverty Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_poverty.show()\n\n\n# 3-12. Create a table of no_high_school_diploma (descending) by community area\n# Extractn top 10 community areas\ntop_10_education_areas = education_table.head(10)\n\n# Create a bar chart\nbar_chart_education = alt.Chart(top_10_education_areas).mark_bar().encode(\n    x=alt.X(\"no_high_school_diploma:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"no_high_school_diploma\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest No Education Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_education.show()\n\n\n# 3-13. Create a table of per_capita_income (descending) by community area\n# Extractn top 10 community areas\ntop_10_income_areas = income_table.head(10)\n\n# Create a bar chart\nbar_chart_income = alt.Chart(top_10_income_areas).mark_bar().encode(\n    x=alt.X(\"per_capita_income:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"per_capita_income\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Income (per capita) Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_income.show()\n\n\n# 3-14. Create a table of unemployment (descending) by community area\n# Extractn top 10 community areas\ntop_10_unemployment_areas = unemployment_table.head(10)\n\n# Create a bar chart\nbar_chart_unemployment = alt.Chart(top_10_unemployment_areas).mark_bar().encode(\n    x=alt.X(\"unemployment:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"unemployment\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Unemployment Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_unemployment.show()\n```\n\n![1_bar_cancer](1_bar_cancer.png)\n![2_bar_diabetes](2_bar_diabetes.png)\n![3_bar_turberculosis](3_bar_turberculosis.png)\n![4_bar_poverty](4_bar_poverty.png)\n![5_bar_education](5_bar_education.png)\n![6_bar_income](6_bar_income.png)\n![7_bar_unemployment](7_bar_unemployment.png)\n\n### Show a table with some variables and community area.\n### (This can be used in a Shiny app: Select community area > show table.)\n```{python}\n# Select necessary columns from dataframe\nvariables_table = data[[\"community_area\", \"community_area_name\", \"cancer_all_sites\", \"diabetes_related\", \"tuberculosis\", \"below_poverty_level\", \"no_high_school_diploma\", \"per_capita_income\", \"unemployment\"]].copy()\n\n# Print the result\nprint(variables_table)\n```\n\n\n\n\n\n# 2. Regression\n# 2-2. Causal Relationship\n# Independent Variable (X) : below_poverty_level, no_high_school_diploma, per_capita_income, unemployment\n# Dependent Variable (Y) : cancer_all_sites, diabetes_related, tuberculosis, breast_cancer_in_females,colorectal_cancer, infant_mortality_rate, lung_cancer, prostate_cancer_in_males, stroke_cerebrovascular_disease,  \n```{python}\nimport statsmodels.api as sm\n\n# 1-1. below_poverty_level ~ cancer_all_sites\nx = sm.add_constant(data[\"below_poverty_level\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_1 = sm.OLS(y, x).fit()\nprint(model_1.summary())\n\n# 1-2. no_high_school_diploma ~ cancer_all_sites\nx = sm.add_constant(data[\"no_high_school_diploma\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_2 = sm.OLS(y, x).fit()\nprint(model_2.summary())\n\n# 1-3. per_capita_income ~ cancer_all_sites\nx = sm.add_constant(data[\"per_capita_income\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_3 = sm.OLS(y, x).fit()\nprint(model_3.summary())\n\n# 1-4. unemployment ~ cancer_all_sites\nx = sm.add_constant(data[\"unemployment\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_4 = sm.OLS(y, x).fit()\nprint(model_4.summary())\n\n# 2-1. below_poverty_level ~ diabetes_related\nx = sm.add_constant(data[\"below_poverty_level\"]) \ny = data[\"diabetes_related\"]                    \nmodel_5 = sm.OLS(y, x).fit()\nprint(model_5.summary())\n\n# 2-2. no_high_school_diploma ~ diabetes_related\nx = sm.add_constant(data[\"no_high_school_diploma\"]) \ny = data[\"diabetes_related\"]                    \nmodel_6 = sm.OLS(y, x).fit()\nprint(model_6.summary())\n\n# 2-3. per_capita_income ~ diabetes_related\nx = sm.add_constant(data[\"per_capita_income\"]) \ny = data[\"diabetes_related\"]                    \nmodel_7 = sm.OLS(y, x).fit()\nprint(model_7.summary())\n\n# 2-4. unemployment ~ diabetes_related\nx = sm.add_constant(data[\"unemployment\"]) \ny = data[\"diabetes_related\"]                    \nmodel_8 = sm.OLS(y, x).fit()\nprint(model_8.summary())\n\n# 3-1. below_poverty_level ~ tuberculosis\nx = sm.add_constant(data[\"below_poverty_level\"]) \ny = data[\"tuberculosis\"]                    \nmodel_9 = sm.OLS(y, x).fit()\nprint(model_9.summary())\n\n# 3-2. no_high_school_diploma ~ tuberculosis\nx = sm.add_constant(data[\"no_high_school_diploma\"]) \ny = data[\"tuberculosis\"]                    \nmodel_10 = sm.OLS(y, x).fit()\nprint(model_10.summary())\n\n# 3-3. per_capita_income ~ tuberculosis\nx = sm.add_constant(data[\"per_capita_income\"]) \ny = data[\"tuberculosis\"]                    \nmodel_11 = sm.OLS(y, x).fit()\nprint(model_11.summary())\n\n# 3-4. unemployment ~ tuberculosis\nx = sm.add_constant(data[\"unemployment\"]) \ny = data[\"tuberculosis\"]                    \nmodel_12 = sm.OLS(y, x).fit()\nprint(model_12.summary())\n```\n# Crate plots with the analysis outcomes.\n```{python}\nimport altair as alt\n\n# 1-1. below_poverty_level ~ cancer_all_sites\n\nx_var_1 = \"below_poverty_level\"\ny_var_1 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_1 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_1}:Q\", title=\"Below Poverty Level (%)\"),\n    y=alt.Y(f\"{y_var_1}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_1, y_var_1]\n).properties(\n    title=f\"Scatter Plot: {x_var_1} vs {y_var_1}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_1 = scatter_plot_1.transform_regression(\n    x_var_1, y_var_1, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_1 = scatter_plot_1 + trend_line_1\n\nfinal_chart_1\n\n\n# 1-2. no_high_school_diploma ~ cancer_all_sites\n\nx_var_2 = \"no_high_school_diploma\"\ny_var_2 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_2 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_2}:Q\", title=\"No High School Diploma\"),\n    y=alt.Y(f\"{y_var_2}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_2, y_var_2]\n).properties(\n    title=f\"Scatter Plot: {x_var_2} vs {y_var_2}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_2 = scatter_plot_2.transform_regression(\n    x_var_2, y_var_2, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_2 = scatter_plot_2 + trend_line_2\n\nfinal_chart_2\n\n\n# 1-3. per_capita_income ~ cancer_all_sites\n\nx_var_3 = \"per_capita_income\"\ny_var_3 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_3 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_3}:Q\", title=\"Per Capita Income\"),\n    y=alt.Y(f\"{y_var_3}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_3, y_var_3]\n).properties(\n    title=f\"Scatter Plot: {x_var_3} vs {y_var_3}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_3 = scatter_plot_3.transform_regression(\n    x_var_3, y_var_3, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_3 = scatter_plot_3 + trend_line_3\n\nfinal_chart_3\n\n\n# 1-4. unemployment ~ cancer_all_sites\n\nx_var_4 = \"unemployment\"\ny_var_4 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_4 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_4}:Q\", title=\"Unemployment\"),\n    y=alt.Y(f\"{y_var_4}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_4, y_var_4]\n).properties(\n    title=f\"Scatter Plot: {x_var_4} vs {y_var_4}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_4 = scatter_plot_4.transform_regression(\n    x_var_4, y_var_4, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_4 = scatter_plot_4 + trend_line_4\n\nfinal_chart_4\n\n\n# 2-1. below_poverty_level ~ diabetes_related\n\nx_var_5 = \"below_poverty_level\"\ny_var_5 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_5 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_5}:Q\", title=\"Below Poverty Level (%)\"),\n    y=alt.Y(f\"{y_var_5}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_5, y_var_5]\n).properties(\n    title=f\"Scatter Plot: {x_var_5} vs {y_var_5}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_5 = scatter_plot_5.transform_regression(\n    x_var_5, y_var_5, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_5 = scatter_plot_5 + trend_line_5\n\nfinal_chart_5\n\n\n# 2-2. no_high_school_diploma ~ diabetes_related\n\nx_var_6 = \"no_high_school_diploma\"\ny_var_6 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_6 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_6}:Q\", title=\"No High School Diploma\"),\n    y=alt.Y(f\"{y_var_6}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_6, y_var_6]\n).properties(\n    title=f\"Scatter Plot: {x_var_6} vs {y_var_6}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_6 = scatter_plot_6.transform_regression(\n    x_var_6, y_var_6, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_6 = scatter_plot_6 + trend_line_6\n\nfinal_chart_6\n\n\n# 2-3. per_capita_income ~ diabetes_related\n\nx_var_7 = \"per_capita_income\"\ny_var_7 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_7 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_7}:Q\", title=\"Per Capita Income\"),\n    y=alt.Y(f\"{y_var_7}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_7, y_var_7]\n).properties(\n    title=f\"Scatter Plot: {x_var_7} vs {y_var_7}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_7 = scatter_plot_7.transform_regression(\n    x_var_7, y_var_7, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_7 = scatter_plot_7 + trend_line_7\n\nfinal_chart_7\n\n\n# 2-4. unemployment ~ diabetes_related\n\nx_var_8 = \"unemployment\"\ny_var_8 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_8 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_8}:Q\", title=\"Unemployment\"),\n    y=alt.Y(f\"{y_var_8}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_8, y_var_8]\n).properties(\n    title=f\"Scatter Plot: {x_var_8} vs {y_var_8}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_8 = scatter_plot_8.transform_regression(\n    x_var_8, y_var_8, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_8 = scatter_plot_8 + trend_line_8\n\nfinal_chart_8\n\n\n# 3-1. below_poverty_level ~ tuberculosis\n\nx_var_9 = \"below_poverty_level\"\ny_var_9 = \"tuberculosis\"\n\n# Altair point plot\nscatter_plot_9 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_9}:Q\", title=\"Below Poverty Level (%)\"),\n    y=alt.Y(f\"{y_var_9}:Q\", title=\"Tuberculosis\"),\n    tooltip=[x_var_9, y_var_9]\n).properties(\n    title=f\"Scatter Plot: {x_var_9} vs {y_var_9}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_9 = scatter_plot_9.transform_regression(\n    x_var_9, y_var_9, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_9 = scatter_plot_9 + trend_line_9\n\nfinal_chart_9\n\n\n# 3-2. no_high_school_diploma ~ tuberculosis\n\nx_var_10 = \"no_high_school_diploma\"\ny_var_10 = \"tuberculosis\"\n\n# Altair point plot\nscatter_plot_10 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_10}:Q\", title=\"No High School Diploma\"),\n    y=alt.Y(f\"{y_var_10}:Q\", title=\"Tuberculosis\"),\n    tooltip=[x_var_10, y_var_10]\n).properties(\n    title=f\"Scatter Plot: {x_var_10} vs {y_var_10}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_10 = scatter_plot_10.transform_regression(\n    x_var_10, y_var_10, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_10 = scatter_plot_10 + trend_line_10\n\nfinal_chart_10\n\n\n# 3-3. per_capita_income ~ tuberculosis\n\nx_var_11 = \"per_capita_income\"\ny_var_11 = \"tuberculosis\"\n\n# Altair point plot\nscatter_plot_11 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_11}:Q\", title=\"Per Capita Income\"),\n    y=alt.Y(f\"{y_var_11}:Q\", title=\"Tuberculosis\"),\n    tooltip=[x_var_11, y_var_11]\n).properties(\n    title=f\"Scatter Plot: {x_var_11} vs {y_var_11}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_11 = scatter_plot_11.transform_regression(\n    x_var_11, y_var_11, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_11 = scatter_plot_11 + trend_line_11\n\nfinal_chart_11\n\n\n# 3-4. unemployment ~ tuberculosis\n\nx_var_12 = \"unemployment\"\ny_var_12 = \"tuberculosis\"\n\n# Altair point plot\nscatter_plot_12 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_12}:Q\", title=\"Unemployment\"),\n    y=alt.Y(f\"{y_var_12}:Q\", title=\"Tuberculosis\"),\n    tooltip=[x_var_12, y_var_12]\n).properties(\n    title=f\"Scatter Plot: {x_var_12} vs {y_var_12}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_12 = scatter_plot_12.transform_regression(\n    x_var_12, y_var_12, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_12 = scatter_plot_12 + trend_line_12\n\nfinal_chart_12\n```\n![1-1_cancer-poverty](1-1_cancer-poverty.png)\n![1-2_cancer-income](1-2_cancer-income.png)\n![1-3._cancer-unemployment](1-3._cancer-unemployment.png)\n![2-1_diabetes-poverty](2-1_diabetes-poverty.png)\n![2-2_diabetes-income](2-2_diabetes-income.png)\n![2-3_diabetes-unemployment](2-3_diabetes-unemployment.png)\n![1-1_cancer-poverty](1-1_cancer-poverty.png)\n![1-2_cancer-income](1-2_cancer-income.png)\n![1-3._cancer-unemployment](1-3._cancer-unemployment.png)\n![3-1_tuberculosis-poverty](3-1_tuberculosis-poverty.png)\n![3-2_tuberculosis-education](3-2_tuberculosis-education.png)\n![3-3_tuberculosis-income](3-3_tuberculosis-income.png)\n\n# 3. Text Analysis\n# url: https://www.cbsnews.com/chicago/news/cancer-care-disparities-1/\n# Subject: Chicago's South, West Sides have many more cancer patients, less access to care.\n# Scrape the article content\n```{python}\nimport requests\nfrom bs4 import BeautifulSoup\n\n# URL\nurl = 'https://www.cbsnews.com/chicago/news/cancer-care-disparities-1/'\n\n# Load the web page\nresponse = requests.get(url)\nresponse.raise_for_status()  # Check if the request is successful\n\n# HTML parsing\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# 기사 본문 추출 (예: <div> 태그의 클래스명이 'content'인 경우)\narticle_section = soup.find('section', class_='content__body')\nif article_section:\n    paragraphs = article_section.find_all('p')\n    article_text = '\\n'.join([para.get_text() for para in paragraphs])\n    print(article_text)\nelse:\n    print(\"Article is not found.\")\n```\n# Text Analysis - semtimental\n```{python}\nfrom textblob import TextBlob\n\n# Create textblob\nblob = TextBlob(article_text)\n\n# Sentiment Analysis\nsentiment = blob.sentiment\npolarity = sentiment.polarity  # -1(negative) +1(oisitive)\nsubjectivity = sentiment.subjectivity  # 0(objective) 1(subjective)\n\nprint(f\"Polarity: {polarity}\")  # 0.10 (slightly positive)\nprint(f\"Subjectivity: {subjectivity}\")  # 0.38 (relatively objective)\n```\n# Text Analysis - semtimental by sentence\n```{python}\nimport spacy\nnlp = spacy.load(\"en_core_web_sm\")\n\ndoc = nlp(article_text)\ntype(doc)\n\nsents = list(doc.sents)\nsents_list = list(doc.sents)\nsents_list\n\nfor token in sents_list[1]:\n    print(token.text)\n```\n```{python}\nfrom textblob import TextBlob\nimport pandas as pd\nimport altair as alt\n\n# Calculate setence polarity\nsentence_polarities = []\nfor i, sentence in enumerate(sents_list):\n    blob = TextBlob(sentence.text)\n    polarity = blob.sentiment.polarity\n    sentence_polarities.append({\"n\": i + 1, \"sentence\": sentence.text, \"polarity\": polarity})\n\n# Create a DataFrame\ndf_polarity = pd.DataFrame(sentence_polarities)\n\n# Print the outcome\nprint(df_polarity)\n```\n```{python}\n# Create a graph about polarity by sentence\nchart_polarity = alt.Chart(df_polarity).mark_line().encode(\n    x=alt.X('n:Q', title='Sentence Number'),\n    y=alt.Y('polarity:Q', title='Polarity'),\n    tooltip=['sentence', 'polarity']\n).properties(\n    title='Sentence Polarity of Article',\n    width=800,\n    height=400\n).interactive()\n\nchart_polarity\n```\n# Text Analysis - semtimental by vocabulary\n```{python}\nfrom collections import Counter\nimport pandas as pd\nimport altair as alt\nimport spacy\n\n# Load spaCy model\nnlp = spacy.load(\"en_core_web_sm\")\n\n# Define custom stopwords\ncustom_stopwords = {\"said\", \"jones\", \"riggins\", \"thomas\", \"sinclair\"}\n\n# Add custom stopwords to the basic stopwords in spaCy\nall_stopwords = nlp.Defaults.stop_words.union(custom_stopwords)\n\n# Remove stopwords and extract words\nwords = [\n    token.text.lower()\n    for sentence in sents_list\n    for token in sentence\n    if token.is_alpha and token.text.lower() not in all_stopwords\n]\n\n# Calculate words frequency\nword_freq = Counter(words)\n\n# Extract top 10 words\nmost_common_words = word_freq.most_common(10)\ndf_word_freq = pd.DataFrame(most_common_words, columns=[\"word\", \"frequency\"])\n\n# Print the outcome\nprint(df_word_freq)\n```\n```{python}\n# Create a bar graph\nchart_word_frequency = alt.Chart(df_word_freq).mark_bar().encode(\n    x=alt.X(\"frequency:Q\", title=\"Frequency\"),\n    y=alt.Y(\"word:N\", sort=\"-x\", title=\"Word\"),\n    tooltip=[\"word\", \"frequency\"]\n).properties(\n    title=\"Top 10 Most Frequent Words (Excluding All Stopwords)\",\n    width=600,\n    height=400\n)\n\nchart_word_frequency\n```\n![chart_polarity](chart_polarity.png)\n![chart_word_frequency](chart_word_frequency.png)\n","srcMarkdownNoYaml":"\n\n# 1. Load the dataset\n```{python}\nimport pandas as pd\n\n# 1. Load the dataset.\nfile_path = \"/Users/sohyunlim/Desktop/python - final/Public_Health_Statistics_-_Selected_public_health_indicators_by_Chicago_community_area_-_Historical_20241031.csv\"\ndata = pd.read_csv(file_path)\ndata.head()\n\n\n# 2. Change the variable names.\n# Replace parentheses with empty strings, hyphens with underscores, and spaces with underscores in column names\ndata.columns = data.columns.str.replace(r\"[()]\", \"\", regex=True).str.replace(\"-\", \"_\").str.replace(\" \", \"_\").str.lower()\nprint(data.columns)\n\n\n# 3. Remove unncessary columns.\ncolumns_to_drop = [\n    \"childhood_blood_lead_level_screening\",\n    \"childhood_lead_poisoning\",\n    \"gonorrhea_in_females\"\n]\ndata = data.drop(columns=columns_to_drop)\nprint(data.columns)\n```\n\n# 3. Basic Plots (table and graph)\n# To explore the community area by health outcomes and socioeconomic factors\n# 3-1. Create a table of cancer_all_sites (descending) by community area\n# 3-2. Create a table of diabetes_related (descending) by community area\n# 3-3. Create a table of tuberculosis (descending) by community area\n# 3-4. Create a table of below_poverty_level (descending) by community area\n# 3-5. Create a table of no_high_school_diploma (descending) by community area\n# 3-6. Create a table of per_capita_income (descending) by community area\n# 3-7. Create a table of unemployment (descending) by community area\n\n```{python}\n# 3-1. Create a table of cancer_all_sites (descending) by community area\nimport pandas as pd\nimport altair as alt\n\n# Select necessary columns from dataframe\ncancer_table = data[[\"community_area\", \"community_area_name\", \"cancer_all_sites\"]].copy()\n\n# Drop na and arrange by descending\ncancer_table = cancer_table.dropna(subset=[\"cancer_all_sites\"])\ncancer_table = cancer_table.sort_values(by=\"cancer_all_sites\", ascending=False)\n\n# Initiate index\ncancer_table.reset_index(drop=True, inplace=True)\n\n# Print the result\nprint(cancer_table)\n\n\n# 3-2. Create a table of diabetes_related (descending) by community area\n# Select necessary columns from dataframe\ndiabetes_table = data[[\"community_area\", \"community_area_name\", \"diabetes_related\"]].copy()\n\n# Drop na and arrange by descending\ndiabetes_table = diabetes_table.dropna(subset=[\"diabetes_related\"])\ndiabetes_table = diabetes_table.sort_values(by=\"diabetes_related\", ascending=False)\n\n# Initiate index\ndiabetes_table.reset_index(drop=True, inplace=True)\n\n# Print the result\nprint(diabetes_table)\n\n# 3-3. Create a table of tuberculosis (descending) by community area\n# Select necessary columns from dataframe\ntuberculosis_table = data[[\"community_area\", \"community_area_name\", \"tuberculosis\"]].copy()\n\n# Drop na and arrange by descending\ntuberculosis_table = tuberculosis_table.dropna(subset=[\"tuberculosis\"])\ntuberculosis_table = tuberculosis_table.sort_values(by=\"tuberculosis\", ascending=False)\n\n# Initiate index\ntuberculosis_table.reset_index(drop=True, inplace=True)\n\n# Print the result\nprint(tuberculosis_table)\n\n\n# 3-4. Create a table of below_poverty_level (descending) by community area\n# Select necessary columns from dataframe\npoverty_table = data[[\"community_area\", \"community_area_name\", \"below_poverty_level\"]].copy()\n\n# Drop na and arrange by descending\npoverty_table = poverty_table.dropna(subset=[\"below_poverty_level\"])\npoverty_table = poverty_table.sort_values(by=\"below_poverty_level\", ascending=False)\n\n# Initiate index\npoverty_table.reset_index(drop=True, inplace=True)\n\n# Print the result\nprint(poverty_table)\n\n\n# 3-5. Create a table of no_high_school_diploma (descending) by community area\n# Select necessary columns from dataframe\neducation_table = data[[\"community_area\", \"community_area_name\", \"no_high_school_diploma\"]].copy()\n\n# Drop na and arrange by descending\neducation_table = education_table.dropna(subset=[\"no_high_school_diploma\"])\neducation_table = education_table.sort_values(by=\"no_high_school_diploma\", ascending=False)\n\n# Initiate index\neducation_table.reset_index(drop=True, inplace=True)\n\n# Print the result\nprint(education_table)\n\n\n# 3-6. Create a table of per_capita_income (descending) by community area\n# Select necessary columns from dataframe\nincome_table = data[[\"community_area\", \"community_area_name\", \"per_capita_income\"]].copy()\n\n# Drop na and arrange by descending\nincome_table = income_table.dropna(subset=[\"per_capita_income\"])\nincome_table = income_table.sort_values(by=\"per_capita_income\", ascending=False)\n\n# Initiate index\nincome_table.reset_index(drop=True, inplace=True)\n\n# Print the result\nprint(income_table)\n\n\n# 3-7. Create a table of unemployment (descending) by community area\n# Select necessary columns from dataframe\nunemployment_table = data[[\"community_area\", \"community_area_name\", \"unemployment\"]].copy()\n\n# Drop na and arrange by descending\nunemployment_table = unemployment_table.dropna(subset=[\"unemployment\"])\nunemployment_table = unemployment_table.sort_values(by=\"unemployment\", ascending=False)\n\n# Initiate index\nunemployment_table.reset_index(drop=True, inplace=True)\n\n# Print the result\nprint(unemployment_table)\n```\n\n# Select top 10 areas in each table and converty it into a graph.\n# 3-8. Create a table of cancer_all_sites (descending) by community area\n# 3-9. Create a table of diabetes_related (descending) by community area\n# 3-10. Create a table of tuberculosis (descending) by community area\n# 3-11. Create a table of below_poverty_level (descending) by community area\n# 3-12. Create a table of no_high_school_diploma (descending) by community area\n# 3-13. Create a table of per_capita_income (descending) by community area\n# 3-14. Create a table of unemployment (descending) by community area\n\n```{python}\n# 3-8. Create a table of cancer_all_sites (descending) by community area\n# Extractn top 10 community areas\ntop_10_cancer_areas = cancer_table.head(10)\n\n# Create a bar chart\nbar_chart_cancer = alt.Chart(top_10_cancer_areas).mark_bar().encode(\n    x=alt.X(\"cancer_all_sites:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"cancer_all_sites\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Cancer Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_cancer.show()\n\n\n# 3-9. Create a table of diabetes_related (descending) by community area\n# Extractn top 10 community areas\ntop_10_diabetes_areas = diabetes_table.head(10)\n\n# Create a bar chart\nbar_chart_diabetes = alt.Chart(top_10_diabetes_areas).mark_bar().encode(\n    x=alt.X(\"diabetes_related:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"diabetes_related\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Diabetes Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_diabetes.show()\n\n\n# 3-10. Create a table of tuberculosis (descending) by community area\n# Extractn top 10 community areas\ntop_10_tuberculosis_areas = tuberculosis_table.head(10)\n\n# Create a bar chart\nbar_chart_tuberculosis = alt.Chart(top_10_tuberculosis_areas).mark_bar().encode(\n    x=alt.X(\"tuberculosis:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"tuberculosis\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Tuberculosis Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_tuberculosis.show()\n\n\n# 3-11. Create a table of below_poverty_level (descending) by community area\n# Extractn top 10 community areas\ntop_10_poverty_areas = poverty_table.head(10)\n\n# Create a bar chart\nbar_chart_poverty = alt.Chart(top_10_poverty_areas).mark_bar().encode(\n    x=alt.X(\"below_poverty_level:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"below_poverty_level\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Poverty Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_poverty.show()\n\n\n# 3-12. Create a table of no_high_school_diploma (descending) by community area\n# Extractn top 10 community areas\ntop_10_education_areas = education_table.head(10)\n\n# Create a bar chart\nbar_chart_education = alt.Chart(top_10_education_areas).mark_bar().encode(\n    x=alt.X(\"no_high_school_diploma:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"no_high_school_diploma\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest No Education Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_education.show()\n\n\n# 3-13. Create a table of per_capita_income (descending) by community area\n# Extractn top 10 community areas\ntop_10_income_areas = income_table.head(10)\n\n# Create a bar chart\nbar_chart_income = alt.Chart(top_10_income_areas).mark_bar().encode(\n    x=alt.X(\"per_capita_income:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"per_capita_income\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Income (per capita) Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_income.show()\n\n\n# 3-14. Create a table of unemployment (descending) by community area\n# Extractn top 10 community areas\ntop_10_unemployment_areas = unemployment_table.head(10)\n\n# Create a bar chart\nbar_chart_unemployment = alt.Chart(top_10_unemployment_areas).mark_bar().encode(\n    x=alt.X(\"unemployment:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"unemployment\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Unemployment Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_unemployment.show()\n```\n\n![1_bar_cancer](1_bar_cancer.png)\n![2_bar_diabetes](2_bar_diabetes.png)\n![3_bar_turberculosis](3_bar_turberculosis.png)\n![4_bar_poverty](4_bar_poverty.png)\n![5_bar_education](5_bar_education.png)\n![6_bar_income](6_bar_income.png)\n![7_bar_unemployment](7_bar_unemployment.png)\n\n### Show a table with some variables and community area.\n### (This can be used in a Shiny app: Select community area > show table.)\n```{python}\n# Select necessary columns from dataframe\nvariables_table = data[[\"community_area\", \"community_area_name\", \"cancer_all_sites\", \"diabetes_related\", \"tuberculosis\", \"below_poverty_level\", \"no_high_school_diploma\", \"per_capita_income\", \"unemployment\"]].copy()\n\n# Print the result\nprint(variables_table)\n```\n\n\n\n\n\n# 2. Regression\n# 2-2. Causal Relationship\n# Independent Variable (X) : below_poverty_level, no_high_school_diploma, per_capita_income, unemployment\n# Dependent Variable (Y) : cancer_all_sites, diabetes_related, tuberculosis, breast_cancer_in_females,colorectal_cancer, infant_mortality_rate, lung_cancer, prostate_cancer_in_males, stroke_cerebrovascular_disease,  \n```{python}\nimport statsmodels.api as sm\n\n# 1-1. below_poverty_level ~ cancer_all_sites\nx = sm.add_constant(data[\"below_poverty_level\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_1 = sm.OLS(y, x).fit()\nprint(model_1.summary())\n\n# 1-2. no_high_school_diploma ~ cancer_all_sites\nx = sm.add_constant(data[\"no_high_school_diploma\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_2 = sm.OLS(y, x).fit()\nprint(model_2.summary())\n\n# 1-3. per_capita_income ~ cancer_all_sites\nx = sm.add_constant(data[\"per_capita_income\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_3 = sm.OLS(y, x).fit()\nprint(model_3.summary())\n\n# 1-4. unemployment ~ cancer_all_sites\nx = sm.add_constant(data[\"unemployment\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_4 = sm.OLS(y, x).fit()\nprint(model_4.summary())\n\n# 2-1. below_poverty_level ~ diabetes_related\nx = sm.add_constant(data[\"below_poverty_level\"]) \ny = data[\"diabetes_related\"]                    \nmodel_5 = sm.OLS(y, x).fit()\nprint(model_5.summary())\n\n# 2-2. no_high_school_diploma ~ diabetes_related\nx = sm.add_constant(data[\"no_high_school_diploma\"]) \ny = data[\"diabetes_related\"]                    \nmodel_6 = sm.OLS(y, x).fit()\nprint(model_6.summary())\n\n# 2-3. per_capita_income ~ diabetes_related\nx = sm.add_constant(data[\"per_capita_income\"]) \ny = data[\"diabetes_related\"]                    \nmodel_7 = sm.OLS(y, x).fit()\nprint(model_7.summary())\n\n# 2-4. unemployment ~ diabetes_related\nx = sm.add_constant(data[\"unemployment\"]) \ny = data[\"diabetes_related\"]                    \nmodel_8 = sm.OLS(y, x).fit()\nprint(model_8.summary())\n\n# 3-1. below_poverty_level ~ tuberculosis\nx = sm.add_constant(data[\"below_poverty_level\"]) \ny = data[\"tuberculosis\"]                    \nmodel_9 = sm.OLS(y, x).fit()\nprint(model_9.summary())\n\n# 3-2. no_high_school_diploma ~ tuberculosis\nx = sm.add_constant(data[\"no_high_school_diploma\"]) \ny = data[\"tuberculosis\"]                    \nmodel_10 = sm.OLS(y, x).fit()\nprint(model_10.summary())\n\n# 3-3. per_capita_income ~ tuberculosis\nx = sm.add_constant(data[\"per_capita_income\"]) \ny = data[\"tuberculosis\"]                    \nmodel_11 = sm.OLS(y, x).fit()\nprint(model_11.summary())\n\n# 3-4. unemployment ~ tuberculosis\nx = sm.add_constant(data[\"unemployment\"]) \ny = data[\"tuberculosis\"]                    \nmodel_12 = sm.OLS(y, x).fit()\nprint(model_12.summary())\n```\n# Crate plots with the analysis outcomes.\n```{python}\nimport altair as alt\n\n# 1-1. below_poverty_level ~ cancer_all_sites\n\nx_var_1 = \"below_poverty_level\"\ny_var_1 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_1 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_1}:Q\", title=\"Below Poverty Level (%)\"),\n    y=alt.Y(f\"{y_var_1}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_1, y_var_1]\n).properties(\n    title=f\"Scatter Plot: {x_var_1} vs {y_var_1}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_1 = scatter_plot_1.transform_regression(\n    x_var_1, y_var_1, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_1 = scatter_plot_1 + trend_line_1\n\nfinal_chart_1\n\n\n# 1-2. no_high_school_diploma ~ cancer_all_sites\n\nx_var_2 = \"no_high_school_diploma\"\ny_var_2 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_2 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_2}:Q\", title=\"No High School Diploma\"),\n    y=alt.Y(f\"{y_var_2}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_2, y_var_2]\n).properties(\n    title=f\"Scatter Plot: {x_var_2} vs {y_var_2}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_2 = scatter_plot_2.transform_regression(\n    x_var_2, y_var_2, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_2 = scatter_plot_2 + trend_line_2\n\nfinal_chart_2\n\n\n# 1-3. per_capita_income ~ cancer_all_sites\n\nx_var_3 = \"per_capita_income\"\ny_var_3 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_3 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_3}:Q\", title=\"Per Capita Income\"),\n    y=alt.Y(f\"{y_var_3}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_3, y_var_3]\n).properties(\n    title=f\"Scatter Plot: {x_var_3} vs {y_var_3}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_3 = scatter_plot_3.transform_regression(\n    x_var_3, y_var_3, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_3 = scatter_plot_3 + trend_line_3\n\nfinal_chart_3\n\n\n# 1-4. unemployment ~ cancer_all_sites\n\nx_var_4 = \"unemployment\"\ny_var_4 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_4 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_4}:Q\", title=\"Unemployment\"),\n    y=alt.Y(f\"{y_var_4}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_4, y_var_4]\n).properties(\n    title=f\"Scatter Plot: {x_var_4} vs {y_var_4}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_4 = scatter_plot_4.transform_regression(\n    x_var_4, y_var_4, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_4 = scatter_plot_4 + trend_line_4\n\nfinal_chart_4\n\n\n# 2-1. below_poverty_level ~ diabetes_related\n\nx_var_5 = \"below_poverty_level\"\ny_var_5 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_5 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_5}:Q\", title=\"Below Poverty Level (%)\"),\n    y=alt.Y(f\"{y_var_5}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_5, y_var_5]\n).properties(\n    title=f\"Scatter Plot: {x_var_5} vs {y_var_5}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_5 = scatter_plot_5.transform_regression(\n    x_var_5, y_var_5, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_5 = scatter_plot_5 + trend_line_5\n\nfinal_chart_5\n\n\n# 2-2. no_high_school_diploma ~ diabetes_related\n\nx_var_6 = \"no_high_school_diploma\"\ny_var_6 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_6 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_6}:Q\", title=\"No High School Diploma\"),\n    y=alt.Y(f\"{y_var_6}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_6, y_var_6]\n).properties(\n    title=f\"Scatter Plot: {x_var_6} vs {y_var_6}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_6 = scatter_plot_6.transform_regression(\n    x_var_6, y_var_6, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_6 = scatter_plot_6 + trend_line_6\n\nfinal_chart_6\n\n\n# 2-3. per_capita_income ~ diabetes_related\n\nx_var_7 = \"per_capita_income\"\ny_var_7 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_7 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_7}:Q\", title=\"Per Capita Income\"),\n    y=alt.Y(f\"{y_var_7}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_7, y_var_7]\n).properties(\n    title=f\"Scatter Plot: {x_var_7} vs {y_var_7}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_7 = scatter_plot_7.transform_regression(\n    x_var_7, y_var_7, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_7 = scatter_plot_7 + trend_line_7\n\nfinal_chart_7\n\n\n# 2-4. unemployment ~ diabetes_related\n\nx_var_8 = \"unemployment\"\ny_var_8 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_8 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_8}:Q\", title=\"Unemployment\"),\n    y=alt.Y(f\"{y_var_8}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_8, y_var_8]\n).properties(\n    title=f\"Scatter Plot: {x_var_8} vs {y_var_8}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_8 = scatter_plot_8.transform_regression(\n    x_var_8, y_var_8, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_8 = scatter_plot_8 + trend_line_8\n\nfinal_chart_8\n\n\n# 3-1. below_poverty_level ~ tuberculosis\n\nx_var_9 = \"below_poverty_level\"\ny_var_9 = \"tuberculosis\"\n\n# Altair point plot\nscatter_plot_9 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_9}:Q\", title=\"Below Poverty Level (%)\"),\n    y=alt.Y(f\"{y_var_9}:Q\", title=\"Tuberculosis\"),\n    tooltip=[x_var_9, y_var_9]\n).properties(\n    title=f\"Scatter Plot: {x_var_9} vs {y_var_9}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_9 = scatter_plot_9.transform_regression(\n    x_var_9, y_var_9, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_9 = scatter_plot_9 + trend_line_9\n\nfinal_chart_9\n\n\n# 3-2. no_high_school_diploma ~ tuberculosis\n\nx_var_10 = \"no_high_school_diploma\"\ny_var_10 = \"tuberculosis\"\n\n# Altair point plot\nscatter_plot_10 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_10}:Q\", title=\"No High School Diploma\"),\n    y=alt.Y(f\"{y_var_10}:Q\", title=\"Tuberculosis\"),\n    tooltip=[x_var_10, y_var_10]\n).properties(\n    title=f\"Scatter Plot: {x_var_10} vs {y_var_10}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_10 = scatter_plot_10.transform_regression(\n    x_var_10, y_var_10, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_10 = scatter_plot_10 + trend_line_10\n\nfinal_chart_10\n\n\n# 3-3. per_capita_income ~ tuberculosis\n\nx_var_11 = \"per_capita_income\"\ny_var_11 = \"tuberculosis\"\n\n# Altair point plot\nscatter_plot_11 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_11}:Q\", title=\"Per Capita Income\"),\n    y=alt.Y(f\"{y_var_11}:Q\", title=\"Tuberculosis\"),\n    tooltip=[x_var_11, y_var_11]\n).properties(\n    title=f\"Scatter Plot: {x_var_11} vs {y_var_11}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_11 = scatter_plot_11.transform_regression(\n    x_var_11, y_var_11, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_11 = scatter_plot_11 + trend_line_11\n\nfinal_chart_11\n\n\n# 3-4. unemployment ~ tuberculosis\n\nx_var_12 = \"unemployment\"\ny_var_12 = \"tuberculosis\"\n\n# Altair point plot\nscatter_plot_12 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_12}:Q\", title=\"Unemployment\"),\n    y=alt.Y(f\"{y_var_12}:Q\", title=\"Tuberculosis\"),\n    tooltip=[x_var_12, y_var_12]\n).properties(\n    title=f\"Scatter Plot: {x_var_12} vs {y_var_12}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_12 = scatter_plot_12.transform_regression(\n    x_var_12, y_var_12, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_12 = scatter_plot_12 + trend_line_12\n\nfinal_chart_12\n```\n![1-1_cancer-poverty](1-1_cancer-poverty.png)\n![1-2_cancer-income](1-2_cancer-income.png)\n![1-3._cancer-unemployment](1-3._cancer-unemployment.png)\n![2-1_diabetes-poverty](2-1_diabetes-poverty.png)\n![2-2_diabetes-income](2-2_diabetes-income.png)\n![2-3_diabetes-unemployment](2-3_diabetes-unemployment.png)\n![1-1_cancer-poverty](1-1_cancer-poverty.png)\n![1-2_cancer-income](1-2_cancer-income.png)\n![1-3._cancer-unemployment](1-3._cancer-unemployment.png)\n![3-1_tuberculosis-poverty](3-1_tuberculosis-poverty.png)\n![3-2_tuberculosis-education](3-2_tuberculosis-education.png)\n![3-3_tuberculosis-income](3-3_tuberculosis-income.png)\n\n# 3. Text Analysis\n# url: https://www.cbsnews.com/chicago/news/cancer-care-disparities-1/\n# Subject: Chicago's South, West Sides have many more cancer patients, less access to care.\n# Scrape the article content\n```{python}\nimport requests\nfrom bs4 import BeautifulSoup\n\n# URL\nurl = 'https://www.cbsnews.com/chicago/news/cancer-care-disparities-1/'\n\n# Load the web page\nresponse = requests.get(url)\nresponse.raise_for_status()  # Check if the request is successful\n\n# HTML parsing\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# 기사 본문 추출 (예: <div> 태그의 클래스명이 'content'인 경우)\narticle_section = soup.find('section', class_='content__body')\nif article_section:\n    paragraphs = article_section.find_all('p')\n    article_text = '\\n'.join([para.get_text() for para in paragraphs])\n    print(article_text)\nelse:\n    print(\"Article is not found.\")\n```\n# Text Analysis - semtimental\n```{python}\nfrom textblob import TextBlob\n\n# Create textblob\nblob = TextBlob(article_text)\n\n# Sentiment Analysis\nsentiment = blob.sentiment\npolarity = sentiment.polarity  # -1(negative) +1(oisitive)\nsubjectivity = sentiment.subjectivity  # 0(objective) 1(subjective)\n\nprint(f\"Polarity: {polarity}\")  # 0.10 (slightly positive)\nprint(f\"Subjectivity: {subjectivity}\")  # 0.38 (relatively objective)\n```\n# Text Analysis - semtimental by sentence\n```{python}\nimport spacy\nnlp = spacy.load(\"en_core_web_sm\")\n\ndoc = nlp(article_text)\ntype(doc)\n\nsents = list(doc.sents)\nsents_list = list(doc.sents)\nsents_list\n\nfor token in sents_list[1]:\n    print(token.text)\n```\n```{python}\nfrom textblob import TextBlob\nimport pandas as pd\nimport altair as alt\n\n# Calculate setence polarity\nsentence_polarities = []\nfor i, sentence in enumerate(sents_list):\n    blob = TextBlob(sentence.text)\n    polarity = blob.sentiment.polarity\n    sentence_polarities.append({\"n\": i + 1, \"sentence\": sentence.text, \"polarity\": polarity})\n\n# Create a DataFrame\ndf_polarity = pd.DataFrame(sentence_polarities)\n\n# Print the outcome\nprint(df_polarity)\n```\n```{python}\n# Create a graph about polarity by sentence\nchart_polarity = alt.Chart(df_polarity).mark_line().encode(\n    x=alt.X('n:Q', title='Sentence Number'),\n    y=alt.Y('polarity:Q', title='Polarity'),\n    tooltip=['sentence', 'polarity']\n).properties(\n    title='Sentence Polarity of Article',\n    width=800,\n    height=400\n).interactive()\n\nchart_polarity\n```\n# Text Analysis - semtimental by vocabulary\n```{python}\nfrom collections import Counter\nimport pandas as pd\nimport altair as alt\nimport spacy\n\n# Load spaCy model\nnlp = spacy.load(\"en_core_web_sm\")\n\n# Define custom stopwords\ncustom_stopwords = {\"said\", \"jones\", \"riggins\", \"thomas\", \"sinclair\"}\n\n# Add custom stopwords to the basic stopwords in spaCy\nall_stopwords = nlp.Defaults.stop_words.union(custom_stopwords)\n\n# Remove stopwords and extract words\nwords = [\n    token.text.lower()\n    for sentence in sents_list\n    for token in sentence\n    if token.is_alpha and token.text.lower() not in all_stopwords\n]\n\n# Calculate words frequency\nword_freq = Counter(words)\n\n# Extract top 10 words\nmost_common_words = word_freq.most_common(10)\ndf_word_freq = pd.DataFrame(most_common_words, columns=[\"word\", \"frequency\"])\n\n# Print the outcome\nprint(df_word_freq)\n```\n```{python}\n# Create a bar graph\nchart_word_frequency = alt.Chart(df_word_freq).mark_bar().encode(\n    x=alt.X(\"frequency:Q\", title=\"Frequency\"),\n    y=alt.Y(\"word:N\", sort=\"-x\", title=\"Word\"),\n    tooltip=[\"word\", \"frequency\"]\n).properties(\n    title=\"Top 10 Most Frequent Words (Excluding All Stopwords)\",\n    width=600,\n    height=400\n)\n\nchart_word_frequency\n```\n![chart_polarity](chart_polarity.png)\n![chart_word_frequency](chart_word_frequency.png)\n"},"formats":{"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-before-body":{"text":"\\RecustomVerbatimEnvironment{verbatim}{Verbatim}{\n  showspaces = false,\n  showtabs = false,\n  breaksymbolleft={},\n  breaklines\n}\n"},"include-in-header":{"text":"\\usepackage{fvextra}\n\\usepackage[margin=1in]{geometry}\n\\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}\n"},"output-file":"final_SL.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"title":"30538 Final Project","author":"Sohyun Lim and Ting Tsai","date":"2024-12-05"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":[]}