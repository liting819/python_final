{"title":"Relationship Between Socioeconomic Indicators and Health outcomes in Chicago","markdown":{"yaml":{"title":"Relationship Between Socioeconomic Indicators and Health outcomes in Chicago ","author":"Ting Tsai & Sohyun Lim","format":"html"},"headingText":"1. Motivation and Research Question","containsRefs":false,"markdown":"\n```{python}\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely.geometry import Point\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nimport requests\nfrom bs4 import BeautifulSoup\nfrom textblob import TextBlob\nimport spacy\nimport altair as alt\nfrom collections import Counter\nimport statsmodels.api as sm\nimport statsmodels.api as sm\n\n```\n\n\n\n# 2. Data Resource\n\n# 3. Text Analysis\nurl: https://www.cbsnews.com/chicago/news/cancer-care-disparities-1/\nSubject: Chicago's South, West Sides have many more cancer patients, less access to care.\n### Scrape the article content\n```{python}\n# URL\nurl = 'https://www.cbsnews.com/chicago/news/cancer-care-disparities-1/'\n\n# Load the web page\nresponse = requests.get(url)\nresponse.raise_for_status()  # Check if the request is successful\n\n# HTML parsing\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# 기사 본문 추출 (예: <div> 태그의 클래스명이 'content'인 경우)\narticle_section = soup.find('section', class_='content__body')\nif article_section:\n    paragraphs = article_section.find_all('p')\n    article_text = '\\n'.join([para.get_text() for para in paragraphs])\n    print(article_text)\nelse:\n    print(\"Article is not found.\")\n```\n\n### Text Analysis - semtimental\n```{python}\n# Create textblob\nblob = TextBlob(article_text)\n\n# Sentiment Analysis\nsentiment = blob.sentiment\npolarity = sentiment.polarity  # -1(negative) +1(oisitive)\nsubjectivity = sentiment.subjectivity  # 0(objective) 1(subjective)\n\nprint(f\"Polarity: {polarity}\")  # 0.10 (slightly positive)\nprint(f\"Subjectivity: {subjectivity}\")  # 0.38 (relatively objective)\n```\n\n### Text Analysis - semtimental by sentence\n```{python}\nnlp = spacy.load(\"en_core_web_sm\")\n\ndoc = nlp(article_text)\ntype(doc)\n\nsents = list(doc.sents)\nsents_list = list(doc.sents)\nsents_list\n\nfor token in sents_list[1]:\n    print(token.text)\n```\n```{python}\n# Calculate setence polarity\nsentence_polarities = []\nfor i, sentence in enumerate(sents_list):\n    blob = TextBlob(sentence.text)\n    polarity = blob.sentiment.polarity\n    sentence_polarities.append({\"n\": i + 1, \"sentence\": sentence.text, \"polarity\": polarity})\n\n# Create a DataFrame\ndf_polarity = pd.DataFrame(sentence_polarities)\n\n# Print the outcome\nprint(df_polarity)\n```\n```{python}\n# Create a graph about polarity by sentence\nchart_polarity = alt.Chart(df_polarity).mark_line().encode(\n    x=alt.X('n:Q', title='Sentence Number'),\n    y=alt.Y('polarity:Q', title='Polarity'),\n    tooltip=['sentence', 'polarity']\n).properties(\n    title='Sentence Polarity of Article',\n    width=800,\n    height=400\n).interactive()\n\nchart_polarity\n```\n\n### Text Analysis - semtimental by vocabulary\n```{python}\n# Load spaCy model\nnlp = spacy.load(\"en_core_web_sm\")\n\n# Define custom stopwords\ncustom_stopwords = {\"said\", \"jones\", \"riggins\", \"thomas\", \"sinclair\"}\n\n# Add custom stopwords to the basic stopwords in spaCy\nall_stopwords = nlp.Defaults.stop_words.union(custom_stopwords)\n\n# Remove stopwords and extract words\nwords = [\n    token.text.lower()\n    for sentence in sents_list\n    for token in sentence\n    if token.is_alpha and token.text.lower() not in all_stopwords\n]\n\n# Calculate words frequency\nword_freq = Counter(words)\n\n# Extract top 10 words\nmost_common_words = word_freq.most_common(10)\ndf_word_freq = pd.DataFrame(most_common_words, columns=[\"word\", \"frequency\"])\n\n# Print the outcome\nprint(df_word_freq)\n```\n```{python}\n# Create a bar graph\nchart_word_frequency = alt.Chart(df_word_freq).mark_bar().encode(\n    x=alt.X(\"frequency:Q\", title=\"Frequency\"),\n    y=alt.Y(\"word:N\", sort=\"-x\", title=\"Word\"),\n    tooltip=[\"word\", \"frequency\"]\n).properties(\n    title=\"Top 10 Most Frequent Words (Excluding All Stopwords)\",\n    width=600,\n    height=400\n)\n\nchart_word_frequency\n```\n\n![chart_polarity](chart_polarity.png)\n![chart_word_frequency](chart_word_frequency.png)\n\n# 4. Basic descriptive statistics \n```{python}\n# Load the dataset.\nfile_path = \"Public_Health_Statistics_-_Selected_public_health_indicators_by_Chicago_community_area_-_Historical_20241031.csv\"\ndata = pd.read_csv(file_path)\ndata.head()\n```\n\n```{python}\n# Replace parentheses with empty strings, hyphens with underscores, and spaces with underscores in column names\ndata.columns = data.columns.str.replace(r\"[()]\", \"\", regex=True).str.replace(\"-\", \"_\").str.replace(\" \", \"_\").str.lower()\n```\n\n```{python}\n# 3. Remove unncessary columns\ncolumns_to_drop = [\n    \"childhood_blood_lead_level_screening\",\n    \"childhood_lead_poisoning\",\n    \"gonorrhea_in_females\"]\ndata = data.drop(columns=columns_to_drop)\n```\n\n```{python}\n# 3-1. Create a table of cancer_all_sites (descending) by community area\nimport pandas as pd\nimport altair as alt\n\n# Select necessary columns from dataframe\ncancer_table = data[[\"community_area\", \"community_area_name\", \"cancer_all_sites\"]].copy()\n\n# Drop na and arrange by descending\ncancer_table = cancer_table.dropna(subset=[\"cancer_all_sites\"])\ncancer_table = cancer_table.sort_values(by=\"cancer_all_sites\", ascending=False)\n\n# Initiate index\ncancer_table.reset_index(drop=True, inplace=True)\n\n# 3-2. Create a table of diabetes_related (descending) by community area\n# Select necessary columns from dataframe\ndiabetes_table = data[[\"community_area\", \"community_area_name\", \"diabetes_related\"]].copy()\n\n# Drop na and arrange by descending\ndiabetes_table = diabetes_table.dropna(subset=[\"diabetes_related\"])\ndiabetes_table = diabetes_table.sort_values(by=\"diabetes_related\", ascending=False)\n\n# Initiate index\ndiabetes_table.reset_index(drop=True, inplace=True)\n\n\n# 3-4. Create a table of below_poverty_level (descending) by community area\n# Select necessary columns from dataframe\npoverty_table = data[[\"community_area\", \"community_area_name\", \"below_poverty_level\"]].copy()\n\n# Drop na and arrange by descending\npoverty_table = poverty_table.dropna(subset=[\"below_poverty_level\"])\npoverty_table = poverty_table.sort_values(by=\"below_poverty_level\", ascending=False)\n\n# Initiate index\npoverty_table.reset_index(drop=True, inplace=True)\n\n\n# 3-5. Create a table of no_high_school_diploma (descending) by community area\n# Select necessary columns from dataframe\neducation_table = data[[\"community_area\", \"community_area_name\", \"no_high_school_diploma\"]].copy()\n\n# Drop na and arrange by descending\neducation_table = education_table.dropna(subset=[\"no_high_school_diploma\"])\neducation_table = education_table.sort_values(by=\"no_high_school_diploma\", ascending=False)\n\n# Initiate index\neducation_table.reset_index(drop=True, inplace=True)\n\n# 3-6. Create a table of per_capita_income (descending) by community area\n# Select necessary columns from dataframe\nincome_table = data[[\"community_area\", \"community_area_name\", \"per_capita_income\"]].copy()\n\n# Drop na and arrange by descending\nincome_table = income_table.dropna(subset=[\"per_capita_income\"])\nincome_table = income_table.sort_values(by=\"per_capita_income\", ascending=False)\n\n# Initiate index\nincome_table.reset_index(drop=True, inplace=True)\n\n# 3-7. Create a table of unemployment (descending) by community area\n# Select necessary columns from dataframe\nunemployment_table = data[[\"community_area\", \"community_area_name\", \"unemployment\"]].copy()\n\n# Drop na and arrange by descending\nunemployment_table = unemployment_table.dropna(subset=[\"unemployment\"])\nunemployment_table = unemployment_table.sort_values(by=\"unemployment\", ascending=False)\n\n# Initiate index\nunemployment_table.reset_index(drop=True, inplace=True)\n```\n\n```{python}\n# 3-8. Create a table of cancer_all_sites (descending) by community area\n# Extractn top 10 community areas\ntop_10_cancer_areas = cancer_table.head(10)\n\n# Create a bar chart\nbar_chart_cancer = alt.Chart(top_10_cancer_areas).mark_bar().encode(\n    x=alt.X(\"cancer_all_sites:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"cancer_all_sites\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Cancer Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_cancer.show()\n\n\n# 3-9. Create a table of diabetes_related (descending) by community area\n# Extractn top 10 community areas\ntop_10_diabetes_areas = diabetes_table.head(10)\n\n# Create a bar chart\nbar_chart_diabetes = alt.Chart(top_10_diabetes_areas).mark_bar().encode(\n    x=alt.X(\"diabetes_related:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"diabetes_related\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Diabetes Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_diabetes.show()\n\n\n# 3-11. Create a table of below_poverty_level (descending) by community area\n# Extractn top 10 community areas\ntop_10_poverty_areas = poverty_table.head(10)\n\n# Create a bar chart\nbar_chart_poverty = alt.Chart(top_10_poverty_areas).mark_bar().encode(\n    x=alt.X(\"below_poverty_level:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"below_poverty_level\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Poverty Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_poverty.show()\n\n\n# 3-12. Create a table of no_high_school_diploma (descending) by community area\n# Extractn top 10 community areas\ntop_10_education_areas = education_table.head(10)\n\n# Create a bar chart\nbar_chart_education = alt.Chart(top_10_education_areas).mark_bar().encode(\n    x=alt.X(\"no_high_school_diploma:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"no_high_school_diploma\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest No Education Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_education.show()\n\n\n# 3-13. Create a table of per_capita_income (descending) by community area\n# Extractn top 10 community areas\ntop_10_income_areas = income_table.head(10)\n\n# Create a bar chart\nbar_chart_income = alt.Chart(top_10_income_areas).mark_bar().encode(\n    x=alt.X(\"per_capita_income:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"per_capita_income\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Income (per capita) Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_income.show()\n\n\n# 3-14. Create a table of unemployment (descending) by community area\n# Extractn top 10 community areas\ntop_10_unemployment_areas = unemployment_table.head(10)\n\n# Create a bar chart\nbar_chart_unemployment = alt.Chart(top_10_unemployment_areas).mark_bar().encode(\n    x=alt.X(\"unemployment:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"unemployment\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Unemployment Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_unemployment.show()\n```\n\n![1_bar_cancer](1_bar_cancer.png)\n![2_bar_diabetes](2_bar_diabetes.png)\n![3_bar_turberculosis](3_bar_turberculosis.png)\n![4_bar_poverty](4_bar_poverty.png)\n![5_bar_education](5_bar_education.png)\n![6_bar_income](6_bar_income.png)\n![7_bar_unemployment](7_bar_unemployment.png)\n\n\n### Choropleth map \n\n```{python}\n# reading chicago community shape file \nchi_shp = gpd.read_file(\"chicomm/chicomm.shp\")\nchi_shp = chi_shp.to_crs(epsg=32616)\n\n# spatial join demographic data\nchi_dem = pd.read_csv(\"Public_Health_Statistics_-_Selected_public_health_indicators_by_Chicago_community_area_-_Historical_20241125.csv\")\n\n# fix the wrong community name \nchi_dem[\"Community Area Name\"] = chi_dem[\"Community Area Name\"].replace(\n    {\"Montclaire\": \"Montclare\"}\n)\n\n# Merge shp with the demographic dataset\nchi_shp_dem = chi_shp.merge(chi_dem, left_on=\"DISTITLE\",right_on = \"Community Area Name\", how=\"outer\")\nchi_shp_dem = chi_shp_dem.to_crs(epsg=32616)\n\n# save the shape + demographic dataset for shiny\nchi_shp_dem.to_file(\"chi_shp_dem.geojson\", driver=\"GeoJSON\")\n```\n\n#### Look at the color map in income, education, poverty rate, and health outcome\n```{python}\ncolumns = ['Cancer (All Sites)','Diabetes-related', 'Below Poverty Level','No High School Diploma', 'Per Capita Income', 'Unemployment']\n\nfor col in columns:\n    fig, ax = plt.subplots(1, 1, figsize=(5, 5))\n    chi_shp_dem.plot(\n        column=col, \n        legend=True, \n        ax=ax,\n        cmap=\"Blues\"\n    )\n    ax.set_title(col)  # Set the title for the plot\n    plt.show()\n\n```\n\n# 5. Linear Regression \nIndependent Variable (X) : below_poverty_level, no_high_school_diploma, per_capita_income, unemployment\n\nDependent Variable (Y) : cancer_all_sites, diabetes_related,breast_cancer_in_females,colorectal_cancer, infant_mortality_rate, lung_cancer, prostate_cancer_in_males, stroke_cerebrovascular_disease,  \n\n```{python}\n# 1-1. below_poverty_level ~ cancer_all_sites\nx = sm.add_constant(data[\"below_poverty_level\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_1 = sm.OLS(y, x).fit()\nprint(model_1.summary())\n\n# 1-2. no_high_school_diploma ~ cancer_all_sites\nx = sm.add_constant(data[\"no_high_school_diploma\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_2 = sm.OLS(y, x).fit()\nprint(model_2.summary())\n\n# 1-3. per_capita_income ~ cancer_all_sites\nx = sm.add_constant(data[\"per_capita_income\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_3 = sm.OLS(y, x).fit()\nprint(model_3.summary())\n\n# 1-4. unemployment ~ cancer_all_sites\nx = sm.add_constant(data[\"unemployment\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_4 = sm.OLS(y, x).fit()\nprint(model_4.summary())\n\n# 2-1. below_poverty_level ~ diabetes_related\nx = sm.add_constant(data[\"below_poverty_level\"]) \ny = data[\"diabetes_related\"]                    \nmodel_5 = sm.OLS(y, x).fit()\nprint(model_5.summary())\n\n# 2-2. no_high_school_diploma ~ diabetes_related\nx = sm.add_constant(data[\"no_high_school_diploma\"]) \ny = data[\"diabetes_related\"]                    \nmodel_6 = sm.OLS(y, x).fit()\nprint(model_6.summary())\n\n# 2-3. per_capita_income ~ diabetes_related\nx = sm.add_constant(data[\"per_capita_income\"]) \ny = data[\"diabetes_related\"]                    \nmodel_7 = sm.OLS(y, x).fit()\nprint(model_7.summary())\n\n# 2-4. unemployment ~ diabetes_related\nx = sm.add_constant(data[\"unemployment\"]) \ny = data[\"diabetes_related\"]                    \nmodel_8 = sm.OLS(y, x).fit()\nprint(model_8.summary())\n\n```\n\n# Crate plots with the analysis outcomes.\n```{python}\n# 1-1. below_poverty_level ~ cancer_all_sites\n\nx_var_1 = \"below_poverty_level\"\ny_var_1 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_1 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_1}:Q\", title=\"Below Poverty Level (%)\"),\n    y=alt.Y(f\"{y_var_1}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_1, y_var_1]\n).properties(\n    title=f\"Scatter Plot: {x_var_1} vs {y_var_1}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_1 = scatter_plot_1.transform_regression(\n    x_var_1, y_var_1, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_1 = scatter_plot_1 + trend_line_1\n\nfinal_chart_1\n\n\n# 1-2. no_high_school_diploma ~ cancer_all_sites\n\nx_var_2 = \"no_high_school_diploma\"\ny_var_2 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_2 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_2}:Q\", title=\"No High School Diploma\"),\n    y=alt.Y(f\"{y_var_2}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_2, y_var_2]\n).properties(\n    title=f\"Scatter Plot: {x_var_2} vs {y_var_2}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_2 = scatter_plot_2.transform_regression(\n    x_var_2, y_var_2, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_2 = scatter_plot_2 + trend_line_2\n\nfinal_chart_2\n\n\n# 1-3. per_capita_income ~ cancer_all_sites\n\nx_var_3 = \"per_capita_income\"\ny_var_3 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_3 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_3}:Q\", title=\"Per Capita Income\"),\n    y=alt.Y(f\"{y_var_3}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_3, y_var_3]\n).properties(\n    title=f\"Scatter Plot: {x_var_3} vs {y_var_3}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_3 = scatter_plot_3.transform_regression(\n    x_var_3, y_var_3, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_3 = scatter_plot_3 + trend_line_3\n\nfinal_chart_3\n\n\n# 1-4. unemployment ~ cancer_all_sites\n\nx_var_4 = \"unemployment\"\ny_var_4 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_4 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_4}:Q\", title=\"Unemployment\"),\n    y=alt.Y(f\"{y_var_4}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_4, y_var_4]\n).properties(\n    title=f\"Scatter Plot: {x_var_4} vs {y_var_4}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_4 = scatter_plot_4.transform_regression(\n    x_var_4, y_var_4, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_4 = scatter_plot_4 + trend_line_4\n\nfinal_chart_4\n\n\n# 2-1. below_poverty_level ~ diabetes_related\n\nx_var_5 = \"below_poverty_level\"\ny_var_5 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_5 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_5}:Q\", title=\"Below Poverty Level (%)\"),\n    y=alt.Y(f\"{y_var_5}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_5, y_var_5]\n).properties(\n    title=f\"Scatter Plot: {x_var_5} vs {y_var_5}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_5 = scatter_plot_5.transform_regression(\n    x_var_5, y_var_5, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_5 = scatter_plot_5 + trend_line_5\n\nfinal_chart_5\n\n\n# 2-2. no_high_school_diploma ~ diabetes_related\n\nx_var_6 = \"no_high_school_diploma\"\ny_var_6 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_6 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_6}:Q\", title=\"No High School Diploma\"),\n    y=alt.Y(f\"{y_var_6}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_6, y_var_6]\n).properties(\n    title=f\"Scatter Plot: {x_var_6} vs {y_var_6}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_6 = scatter_plot_6.transform_regression(\n    x_var_6, y_var_6, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_6 = scatter_plot_6 + trend_line_6\n\nfinal_chart_6\n\n\n# 2-3. per_capita_income ~ diabetes_related\n\nx_var_7 = \"per_capita_income\"\ny_var_7 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_7 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_7}:Q\", title=\"Per Capita Income\"),\n    y=alt.Y(f\"{y_var_7}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_7, y_var_7]\n).properties(\n    title=f\"Scatter Plot: {x_var_7} vs {y_var_7}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_7 = scatter_plot_7.transform_regression(\n    x_var_7, y_var_7, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_7 = scatter_plot_7 + trend_line_7\n\nfinal_chart_7\n\n\n# 2-4. unemployment ~ diabetes_related\n\nx_var_8 = \"unemployment\"\ny_var_8 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_8 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_8}:Q\", title=\"Unemployment\"),\n    y=alt.Y(f\"{y_var_8}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_8, y_var_8]\n).properties(\n    title=f\"Scatter Plot: {x_var_8} vs {y_var_8}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_8 = scatter_plot_8.transform_regression(\n    x_var_8, y_var_8, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_8 = scatter_plot_8 + trend_line_8\n\nfinal_chart_8\n\n```\n\n![1-1_cancer-poverty](1-1_cancer-poverty.png)\n![1-2_cancer-income](1-2_cancer-income.png)\n![1-3._cancer-unemployment](1-3._cancer-unemployment.png)\n![2-1_diabetes-poverty](2-1_diabetes-poverty.png)\n![2-2_diabetes-income](2-2_diabetes-income.png)\n![2-3_diabetes-unemployment](2-3_diabetes-unemployment.png)\n![1-1_cancer-poverty](1-1_cancer-poverty.png)\n![1-2_cancer-income](1-2_cancer-income.png)\n![1-3._cancer-unemployment](1-3._cancer-unemployment.png)\n\n# 6. Spatial Analysis \n### Creating 1 mile buffer map around community health center \n```{python}\n# reading the file \nfilepath = \"/Users/tsaili-ting/Uchicago/Year2/Y2Fall/Python2/python_final/Map_-_Public_Health_Services_-_Chicago_Primary_Care_Community_Health_Centers.csv\"\nmap = gpd.read_file(filepath)\n```\n\n```{python}\n#clean the dataset and make it a geo dataframe\ndf = pd.DataFrame(map)\n\n# extract Coordinates\ndf[['address', 'coordinates']] = df['Address'].str.extract(r'^(.*)\\n\\((.*)\\)$')\ndf[['latitude', 'longitude']] = df['coordinates'].str.split(', ', expand=True)\n\n# convert Latitude and Longitude to Numeric\ndf['latitude'] = pd.to_numeric(df['latitude'])\ndf['longitude'] = pd.to_numeric(df['longitude'])\n\n# create Geometry Column\ndf['geometry'] = df.apply(lambda row: Point(row['longitude'], row['latitude']), axis=1)\n\n# convert to GeoDataFrame\ngdf = gpd.GeoDataFrame(df, geometry='geometry')\n\n# crop unnecessary columns if desired\ngdf = gdf.drop(columns=['Address', 'coordinates'])\n```\n\n```{python}\n# filter GeoDataFrame to keep points within Chicago's bounding box\npoint = gdf[\n    (gdf['latitude'] >= 41.64) & (gdf['latitude'] <= 42.02) &\n    (gdf['longitude'] >= -87.94) & (gdf['longitude'] <= -87.52)]\n# make a geojson file for shiny \npoint.to_file(\"point.geojson\", driver=\"GeoJSON\")\n\n```\n\n```{python}\n# Plot only the points in Chicago\npoint.plot(marker='o', color='green', markersize=5, figsize=(5, 5))\nplt.title(\"Map of Locations in Chicago\")\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.grid(True)\nplt.show()\n```\n\n```{python}\n# match the crs code for creating buffer\npoint = point.set_crs(epsg=4326)\npoint = point.to_crs(epsg=32616)\nchi_shp = chi_shp.to_crs(epsg=32616)\n```\n\n### Base Map with the points\n```{python}\n# create a base map with the shapefile\nax = chi_shp.plot(color='lightgrey', edgecolor='black', figsize=(5, 5), alpha=0.5)\n# overlay the points on the map\npoint.plot(ax=ax, marker='o', color='red', markersize=10)\nplt.title(\"Chicago Map with Points\")\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.show()\n```\n\n### Highlight the area with the health centers\n```{python}\n# highlight the area that has Chicago Primary Care Community Health Centers\n# spatial join\nhighlighted_areas = chi_shp.sjoin(point, how='inner', predicate='intersects')\n\n# keep only unique community areas\nhighlighted_areas = highlighted_areas.drop_duplicates(subset=chi_shp.geometry.name)\n\n# add a highlight flag\nchi_shp[\"has_points\"] = chi_shp.geometry.apply(lambda geom: geom in highlighted_areas.geometry.values)\n\n# plot shapefile, highlighting areas with points\ncustom_cmap = ListedColormap([\"yellow\", \"lightgrey\"])\nax = chi_shp.plot(\n    column=\"has_points\", \n    cmap=custom_cmap, \n    edgecolor=\"grey\",\n    figsize=(5, 5),\n    legend=True\n)\n\n# add the points to the map\npoint.plot(ax=ax, marker='o', color='red', markersize=5, label=\"Points\")\n\n# add labels and title\nplt.title(\"Highlighted Community Areas with Points\")\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.legend()\nplt.show()\n```\n\n### Combined Demographic and Health outcome data \n```{python}\n# fix the wrong community name \ndata[\"community_area_name\"] = data[\"community_area_name\"].replace(\n    {\"Montclaire\": \"Montclare\"})\n\n# Merge shp with the demographic dataset\nchi_shp_dem = chi_shp.merge(data, left_on=\"DISTITLE\",right_on = \"community_area_name\", how=\"outer\")\nchi_shp_dem = chi_shp_dem.to_crs(epsg=32616)\n\n# save the shape + demographic dataset for shiny\nchi_shp_dem.to_file(\"chi_shp_dem.geojson\", driver=\"GeoJSON\")\n\n```\n\n### Look at the 1 mile buffer for the primary care center \n\n```{python}\n# create the 1 mile buffer \npoint[\"buffer\"] = point.geometry.buffer(1609)\nbuffers = gpd.GeoDataFrame(point, geometry=\"buffer\", crs=point.crs)\n```\n\n#### Cancer mortality Rate in Community Area \n```{python}\nfig, ax = plt.subplots(1, 1, figsize=(5, 5))\nchi_shp_dem.plot(ax=ax, column=\"cancer_all_sites\", cmap=\"Reds\", edgecolor=\"lightgrey\",legend=True, label=\"Cancer Rates\")\nbuffers.plot(ax=ax, color=\"blue\", alpha=0.2, edgecolor=\"None\")\n\nplt.title(\" 1 Mile Buffers and Cancer Rates in Community Areas\")\nplt.legend()\nplt.show()\n```\n\n#### Diabetes rate in Community Area \n```{python}\nfig, ax = plt.subplots(1, 1, figsize=(5, 5))\nchi_shp_dem.plot(ax=ax, column=\"diabetes_related\", cmap=\"Blues\", edgecolor=\"lightgrey\",legend=True, label=\"Diabetes Rates\")\nbuffers.plot(ax=ax, color=\"blue\", alpha=0.2, edgecolor=\"None\")\n\nplt.title(\" 1 Mile Buffers and Diabetes in Community Areas\")\nplt.legend()\nplt.show()\n```\n\n#### Below Poverty Level in Community Area \n```{python}\nfig, ax = plt.subplots(1, 1, figsize=(5, 5))\nchi_shp_dem.plot(ax=ax, column=\"below_poverty_level\", cmap=\"Greens\", edgecolor=\"lightgrey\",legend=True, label=\"Below Poverty Level\")\nbuffers.plot(ax=ax, color=\"blue\", alpha=0.2, edgecolor=\"None\")\n\nplt.title(\" 1 Mile Buffers and Below Poverty Levelin Community Areas\")\nplt.legend()\nplt.show()\n```\n","srcMarkdownNoYaml":"\n```{python}\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely.geometry import Point\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nimport requests\nfrom bs4 import BeautifulSoup\nfrom textblob import TextBlob\nimport spacy\nimport altair as alt\nfrom collections import Counter\nimport statsmodels.api as sm\nimport statsmodels.api as sm\n\n```\n\n\n# 1. Motivation and Research Question\n\n# 2. Data Resource\n\n# 3. Text Analysis\nurl: https://www.cbsnews.com/chicago/news/cancer-care-disparities-1/\nSubject: Chicago's South, West Sides have many more cancer patients, less access to care.\n### Scrape the article content\n```{python}\n# URL\nurl = 'https://www.cbsnews.com/chicago/news/cancer-care-disparities-1/'\n\n# Load the web page\nresponse = requests.get(url)\nresponse.raise_for_status()  # Check if the request is successful\n\n# HTML parsing\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# 기사 본문 추출 (예: <div> 태그의 클래스명이 'content'인 경우)\narticle_section = soup.find('section', class_='content__body')\nif article_section:\n    paragraphs = article_section.find_all('p')\n    article_text = '\\n'.join([para.get_text() for para in paragraphs])\n    print(article_text)\nelse:\n    print(\"Article is not found.\")\n```\n\n### Text Analysis - semtimental\n```{python}\n# Create textblob\nblob = TextBlob(article_text)\n\n# Sentiment Analysis\nsentiment = blob.sentiment\npolarity = sentiment.polarity  # -1(negative) +1(oisitive)\nsubjectivity = sentiment.subjectivity  # 0(objective) 1(subjective)\n\nprint(f\"Polarity: {polarity}\")  # 0.10 (slightly positive)\nprint(f\"Subjectivity: {subjectivity}\")  # 0.38 (relatively objective)\n```\n\n### Text Analysis - semtimental by sentence\n```{python}\nnlp = spacy.load(\"en_core_web_sm\")\n\ndoc = nlp(article_text)\ntype(doc)\n\nsents = list(doc.sents)\nsents_list = list(doc.sents)\nsents_list\n\nfor token in sents_list[1]:\n    print(token.text)\n```\n```{python}\n# Calculate setence polarity\nsentence_polarities = []\nfor i, sentence in enumerate(sents_list):\n    blob = TextBlob(sentence.text)\n    polarity = blob.sentiment.polarity\n    sentence_polarities.append({\"n\": i + 1, \"sentence\": sentence.text, \"polarity\": polarity})\n\n# Create a DataFrame\ndf_polarity = pd.DataFrame(sentence_polarities)\n\n# Print the outcome\nprint(df_polarity)\n```\n```{python}\n# Create a graph about polarity by sentence\nchart_polarity = alt.Chart(df_polarity).mark_line().encode(\n    x=alt.X('n:Q', title='Sentence Number'),\n    y=alt.Y('polarity:Q', title='Polarity'),\n    tooltip=['sentence', 'polarity']\n).properties(\n    title='Sentence Polarity of Article',\n    width=800,\n    height=400\n).interactive()\n\nchart_polarity\n```\n\n### Text Analysis - semtimental by vocabulary\n```{python}\n# Load spaCy model\nnlp = spacy.load(\"en_core_web_sm\")\n\n# Define custom stopwords\ncustom_stopwords = {\"said\", \"jones\", \"riggins\", \"thomas\", \"sinclair\"}\n\n# Add custom stopwords to the basic stopwords in spaCy\nall_stopwords = nlp.Defaults.stop_words.union(custom_stopwords)\n\n# Remove stopwords and extract words\nwords = [\n    token.text.lower()\n    for sentence in sents_list\n    for token in sentence\n    if token.is_alpha and token.text.lower() not in all_stopwords\n]\n\n# Calculate words frequency\nword_freq = Counter(words)\n\n# Extract top 10 words\nmost_common_words = word_freq.most_common(10)\ndf_word_freq = pd.DataFrame(most_common_words, columns=[\"word\", \"frequency\"])\n\n# Print the outcome\nprint(df_word_freq)\n```\n```{python}\n# Create a bar graph\nchart_word_frequency = alt.Chart(df_word_freq).mark_bar().encode(\n    x=alt.X(\"frequency:Q\", title=\"Frequency\"),\n    y=alt.Y(\"word:N\", sort=\"-x\", title=\"Word\"),\n    tooltip=[\"word\", \"frequency\"]\n).properties(\n    title=\"Top 10 Most Frequent Words (Excluding All Stopwords)\",\n    width=600,\n    height=400\n)\n\nchart_word_frequency\n```\n\n![chart_polarity](chart_polarity.png)\n![chart_word_frequency](chart_word_frequency.png)\n\n# 4. Basic descriptive statistics \n```{python}\n# Load the dataset.\nfile_path = \"Public_Health_Statistics_-_Selected_public_health_indicators_by_Chicago_community_area_-_Historical_20241031.csv\"\ndata = pd.read_csv(file_path)\ndata.head()\n```\n\n```{python}\n# Replace parentheses with empty strings, hyphens with underscores, and spaces with underscores in column names\ndata.columns = data.columns.str.replace(r\"[()]\", \"\", regex=True).str.replace(\"-\", \"_\").str.replace(\" \", \"_\").str.lower()\n```\n\n```{python}\n# 3. Remove unncessary columns\ncolumns_to_drop = [\n    \"childhood_blood_lead_level_screening\",\n    \"childhood_lead_poisoning\",\n    \"gonorrhea_in_females\"]\ndata = data.drop(columns=columns_to_drop)\n```\n\n```{python}\n# 3-1. Create a table of cancer_all_sites (descending) by community area\nimport pandas as pd\nimport altair as alt\n\n# Select necessary columns from dataframe\ncancer_table = data[[\"community_area\", \"community_area_name\", \"cancer_all_sites\"]].copy()\n\n# Drop na and arrange by descending\ncancer_table = cancer_table.dropna(subset=[\"cancer_all_sites\"])\ncancer_table = cancer_table.sort_values(by=\"cancer_all_sites\", ascending=False)\n\n# Initiate index\ncancer_table.reset_index(drop=True, inplace=True)\n\n# 3-2. Create a table of diabetes_related (descending) by community area\n# Select necessary columns from dataframe\ndiabetes_table = data[[\"community_area\", \"community_area_name\", \"diabetes_related\"]].copy()\n\n# Drop na and arrange by descending\ndiabetes_table = diabetes_table.dropna(subset=[\"diabetes_related\"])\ndiabetes_table = diabetes_table.sort_values(by=\"diabetes_related\", ascending=False)\n\n# Initiate index\ndiabetes_table.reset_index(drop=True, inplace=True)\n\n\n# 3-4. Create a table of below_poverty_level (descending) by community area\n# Select necessary columns from dataframe\npoverty_table = data[[\"community_area\", \"community_area_name\", \"below_poverty_level\"]].copy()\n\n# Drop na and arrange by descending\npoverty_table = poverty_table.dropna(subset=[\"below_poverty_level\"])\npoverty_table = poverty_table.sort_values(by=\"below_poverty_level\", ascending=False)\n\n# Initiate index\npoverty_table.reset_index(drop=True, inplace=True)\n\n\n# 3-5. Create a table of no_high_school_diploma (descending) by community area\n# Select necessary columns from dataframe\neducation_table = data[[\"community_area\", \"community_area_name\", \"no_high_school_diploma\"]].copy()\n\n# Drop na and arrange by descending\neducation_table = education_table.dropna(subset=[\"no_high_school_diploma\"])\neducation_table = education_table.sort_values(by=\"no_high_school_diploma\", ascending=False)\n\n# Initiate index\neducation_table.reset_index(drop=True, inplace=True)\n\n# 3-6. Create a table of per_capita_income (descending) by community area\n# Select necessary columns from dataframe\nincome_table = data[[\"community_area\", \"community_area_name\", \"per_capita_income\"]].copy()\n\n# Drop na and arrange by descending\nincome_table = income_table.dropna(subset=[\"per_capita_income\"])\nincome_table = income_table.sort_values(by=\"per_capita_income\", ascending=False)\n\n# Initiate index\nincome_table.reset_index(drop=True, inplace=True)\n\n# 3-7. Create a table of unemployment (descending) by community area\n# Select necessary columns from dataframe\nunemployment_table = data[[\"community_area\", \"community_area_name\", \"unemployment\"]].copy()\n\n# Drop na and arrange by descending\nunemployment_table = unemployment_table.dropna(subset=[\"unemployment\"])\nunemployment_table = unemployment_table.sort_values(by=\"unemployment\", ascending=False)\n\n# Initiate index\nunemployment_table.reset_index(drop=True, inplace=True)\n```\n\n```{python}\n# 3-8. Create a table of cancer_all_sites (descending) by community area\n# Extractn top 10 community areas\ntop_10_cancer_areas = cancer_table.head(10)\n\n# Create a bar chart\nbar_chart_cancer = alt.Chart(top_10_cancer_areas).mark_bar().encode(\n    x=alt.X(\"cancer_all_sites:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"cancer_all_sites\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Cancer Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_cancer.show()\n\n\n# 3-9. Create a table of diabetes_related (descending) by community area\n# Extractn top 10 community areas\ntop_10_diabetes_areas = diabetes_table.head(10)\n\n# Create a bar chart\nbar_chart_diabetes = alt.Chart(top_10_diabetes_areas).mark_bar().encode(\n    x=alt.X(\"diabetes_related:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"diabetes_related\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Diabetes Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_diabetes.show()\n\n\n# 3-11. Create a table of below_poverty_level (descending) by community area\n# Extractn top 10 community areas\ntop_10_poverty_areas = poverty_table.head(10)\n\n# Create a bar chart\nbar_chart_poverty = alt.Chart(top_10_poverty_areas).mark_bar().encode(\n    x=alt.X(\"below_poverty_level:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"below_poverty_level\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Poverty Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_poverty.show()\n\n\n# 3-12. Create a table of no_high_school_diploma (descending) by community area\n# Extractn top 10 community areas\ntop_10_education_areas = education_table.head(10)\n\n# Create a bar chart\nbar_chart_education = alt.Chart(top_10_education_areas).mark_bar().encode(\n    x=alt.X(\"no_high_school_diploma:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"no_high_school_diploma\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest No Education Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_education.show()\n\n\n# 3-13. Create a table of per_capita_income (descending) by community area\n# Extractn top 10 community areas\ntop_10_income_areas = income_table.head(10)\n\n# Create a bar chart\nbar_chart_income = alt.Chart(top_10_income_areas).mark_bar().encode(\n    x=alt.X(\"per_capita_income:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"per_capita_income\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Income (per capita) Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_income.show()\n\n\n# 3-14. Create a table of unemployment (descending) by community area\n# Extractn top 10 community areas\ntop_10_unemployment_areas = unemployment_table.head(10)\n\n# Create a bar chart\nbar_chart_unemployment = alt.Chart(top_10_unemployment_areas).mark_bar().encode(\n    x=alt.X(\"unemployment:Q\", title=\"Cancer (All Sites)\"),\n    y=alt.Y(\"community_area_name:N\", sort=\"-x\", title=\"Community Area\"),\n    tooltip=[\"community_area_name\", \"unemployment\"]\n).properties(\n    title=\"Top 10 Community Areas with Highest Unemployment Index\",\n    width=600,\n    height=400\n)\n\nbar_chart_unemployment.show()\n```\n\n![1_bar_cancer](1_bar_cancer.png)\n![2_bar_diabetes](2_bar_diabetes.png)\n![3_bar_turberculosis](3_bar_turberculosis.png)\n![4_bar_poverty](4_bar_poverty.png)\n![5_bar_education](5_bar_education.png)\n![6_bar_income](6_bar_income.png)\n![7_bar_unemployment](7_bar_unemployment.png)\n\n\n### Choropleth map \n\n```{python}\n# reading chicago community shape file \nchi_shp = gpd.read_file(\"chicomm/chicomm.shp\")\nchi_shp = chi_shp.to_crs(epsg=32616)\n\n# spatial join demographic data\nchi_dem = pd.read_csv(\"Public_Health_Statistics_-_Selected_public_health_indicators_by_Chicago_community_area_-_Historical_20241125.csv\")\n\n# fix the wrong community name \nchi_dem[\"Community Area Name\"] = chi_dem[\"Community Area Name\"].replace(\n    {\"Montclaire\": \"Montclare\"}\n)\n\n# Merge shp with the demographic dataset\nchi_shp_dem = chi_shp.merge(chi_dem, left_on=\"DISTITLE\",right_on = \"Community Area Name\", how=\"outer\")\nchi_shp_dem = chi_shp_dem.to_crs(epsg=32616)\n\n# save the shape + demographic dataset for shiny\nchi_shp_dem.to_file(\"chi_shp_dem.geojson\", driver=\"GeoJSON\")\n```\n\n#### Look at the color map in income, education, poverty rate, and health outcome\n```{python}\ncolumns = ['Cancer (All Sites)','Diabetes-related', 'Below Poverty Level','No High School Diploma', 'Per Capita Income', 'Unemployment']\n\nfor col in columns:\n    fig, ax = plt.subplots(1, 1, figsize=(5, 5))\n    chi_shp_dem.plot(\n        column=col, \n        legend=True, \n        ax=ax,\n        cmap=\"Blues\"\n    )\n    ax.set_title(col)  # Set the title for the plot\n    plt.show()\n\n```\n\n# 5. Linear Regression \nIndependent Variable (X) : below_poverty_level, no_high_school_diploma, per_capita_income, unemployment\n\nDependent Variable (Y) : cancer_all_sites, diabetes_related,breast_cancer_in_females,colorectal_cancer, infant_mortality_rate, lung_cancer, prostate_cancer_in_males, stroke_cerebrovascular_disease,  \n\n```{python}\n# 1-1. below_poverty_level ~ cancer_all_sites\nx = sm.add_constant(data[\"below_poverty_level\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_1 = sm.OLS(y, x).fit()\nprint(model_1.summary())\n\n# 1-2. no_high_school_diploma ~ cancer_all_sites\nx = sm.add_constant(data[\"no_high_school_diploma\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_2 = sm.OLS(y, x).fit()\nprint(model_2.summary())\n\n# 1-3. per_capita_income ~ cancer_all_sites\nx = sm.add_constant(data[\"per_capita_income\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_3 = sm.OLS(y, x).fit()\nprint(model_3.summary())\n\n# 1-4. unemployment ~ cancer_all_sites\nx = sm.add_constant(data[\"unemployment\"]) \ny = data[\"cancer_all_sites\"]                    \nmodel_4 = sm.OLS(y, x).fit()\nprint(model_4.summary())\n\n# 2-1. below_poverty_level ~ diabetes_related\nx = sm.add_constant(data[\"below_poverty_level\"]) \ny = data[\"diabetes_related\"]                    \nmodel_5 = sm.OLS(y, x).fit()\nprint(model_5.summary())\n\n# 2-2. no_high_school_diploma ~ diabetes_related\nx = sm.add_constant(data[\"no_high_school_diploma\"]) \ny = data[\"diabetes_related\"]                    \nmodel_6 = sm.OLS(y, x).fit()\nprint(model_6.summary())\n\n# 2-3. per_capita_income ~ diabetes_related\nx = sm.add_constant(data[\"per_capita_income\"]) \ny = data[\"diabetes_related\"]                    \nmodel_7 = sm.OLS(y, x).fit()\nprint(model_7.summary())\n\n# 2-4. unemployment ~ diabetes_related\nx = sm.add_constant(data[\"unemployment\"]) \ny = data[\"diabetes_related\"]                    \nmodel_8 = sm.OLS(y, x).fit()\nprint(model_8.summary())\n\n```\n\n# Crate plots with the analysis outcomes.\n```{python}\n# 1-1. below_poverty_level ~ cancer_all_sites\n\nx_var_1 = \"below_poverty_level\"\ny_var_1 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_1 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_1}:Q\", title=\"Below Poverty Level (%)\"),\n    y=alt.Y(f\"{y_var_1}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_1, y_var_1]\n).properties(\n    title=f\"Scatter Plot: {x_var_1} vs {y_var_1}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_1 = scatter_plot_1.transform_regression(\n    x_var_1, y_var_1, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_1 = scatter_plot_1 + trend_line_1\n\nfinal_chart_1\n\n\n# 1-2. no_high_school_diploma ~ cancer_all_sites\n\nx_var_2 = \"no_high_school_diploma\"\ny_var_2 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_2 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_2}:Q\", title=\"No High School Diploma\"),\n    y=alt.Y(f\"{y_var_2}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_2, y_var_2]\n).properties(\n    title=f\"Scatter Plot: {x_var_2} vs {y_var_2}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_2 = scatter_plot_2.transform_regression(\n    x_var_2, y_var_2, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_2 = scatter_plot_2 + trend_line_2\n\nfinal_chart_2\n\n\n# 1-3. per_capita_income ~ cancer_all_sites\n\nx_var_3 = \"per_capita_income\"\ny_var_3 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_3 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_3}:Q\", title=\"Per Capita Income\"),\n    y=alt.Y(f\"{y_var_3}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_3, y_var_3]\n).properties(\n    title=f\"Scatter Plot: {x_var_3} vs {y_var_3}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_3 = scatter_plot_3.transform_regression(\n    x_var_3, y_var_3, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_3 = scatter_plot_3 + trend_line_3\n\nfinal_chart_3\n\n\n# 1-4. unemployment ~ cancer_all_sites\n\nx_var_4 = \"unemployment\"\ny_var_4 = \"cancer_all_sites\"\n\n# Altair point plot\nscatter_plot_4 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_4}:Q\", title=\"Unemployment\"),\n    y=alt.Y(f\"{y_var_4}:Q\", title=\"Cancer (All Sites)\"),\n    tooltip=[x_var_4, y_var_4]\n).properties(\n    title=f\"Scatter Plot: {x_var_4} vs {y_var_4}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_4 = scatter_plot_4.transform_regression(\n    x_var_4, y_var_4, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_4 = scatter_plot_4 + trend_line_4\n\nfinal_chart_4\n\n\n# 2-1. below_poverty_level ~ diabetes_related\n\nx_var_5 = \"below_poverty_level\"\ny_var_5 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_5 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_5}:Q\", title=\"Below Poverty Level (%)\"),\n    y=alt.Y(f\"{y_var_5}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_5, y_var_5]\n).properties(\n    title=f\"Scatter Plot: {x_var_5} vs {y_var_5}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_5 = scatter_plot_5.transform_regression(\n    x_var_5, y_var_5, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_5 = scatter_plot_5 + trend_line_5\n\nfinal_chart_5\n\n\n# 2-2. no_high_school_diploma ~ diabetes_related\n\nx_var_6 = \"no_high_school_diploma\"\ny_var_6 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_6 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_6}:Q\", title=\"No High School Diploma\"),\n    y=alt.Y(f\"{y_var_6}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_6, y_var_6]\n).properties(\n    title=f\"Scatter Plot: {x_var_6} vs {y_var_6}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_6 = scatter_plot_6.transform_regression(\n    x_var_6, y_var_6, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_6 = scatter_plot_6 + trend_line_6\n\nfinal_chart_6\n\n\n# 2-3. per_capita_income ~ diabetes_related\n\nx_var_7 = \"per_capita_income\"\ny_var_7 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_7 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_7}:Q\", title=\"Per Capita Income\"),\n    y=alt.Y(f\"{y_var_7}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_7, y_var_7]\n).properties(\n    title=f\"Scatter Plot: {x_var_7} vs {y_var_7}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_7 = scatter_plot_7.transform_regression(\n    x_var_7, y_var_7, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_7 = scatter_plot_7 + trend_line_7\n\nfinal_chart_7\n\n\n# 2-4. unemployment ~ diabetes_related\n\nx_var_8 = \"unemployment\"\ny_var_8 = \"diabetes_related\"\n\n# Altair point plot\nscatter_plot_8 = alt.Chart(data).mark_point().encode(\n    x=alt.X(f\"{x_var_8}:Q\", title=\"Unemployment\"),\n    y=alt.Y(f\"{y_var_8}:Q\", title=\"Diabetes Related\"),\n    tooltip=[x_var_8, y_var_8]\n).properties(\n    title=f\"Scatter Plot: {x_var_8} vs {y_var_8}\",\n    width=500,\n    height=400\n)\n\n# Add line\ntrend_line_8 = scatter_plot_8.transform_regression(\n    x_var_8, y_var_8, method=\"linear\"\n).mark_line(color=\"red\")\n\n# point plot + line\nfinal_chart_8 = scatter_plot_8 + trend_line_8\n\nfinal_chart_8\n\n```\n\n![1-1_cancer-poverty](1-1_cancer-poverty.png)\n![1-2_cancer-income](1-2_cancer-income.png)\n![1-3._cancer-unemployment](1-3._cancer-unemployment.png)\n![2-1_diabetes-poverty](2-1_diabetes-poverty.png)\n![2-2_diabetes-income](2-2_diabetes-income.png)\n![2-3_diabetes-unemployment](2-3_diabetes-unemployment.png)\n![1-1_cancer-poverty](1-1_cancer-poverty.png)\n![1-2_cancer-income](1-2_cancer-income.png)\n![1-3._cancer-unemployment](1-3._cancer-unemployment.png)\n\n# 6. Spatial Analysis \n### Creating 1 mile buffer map around community health center \n```{python}\n# reading the file \nfilepath = \"/Users/tsaili-ting/Uchicago/Year2/Y2Fall/Python2/python_final/Map_-_Public_Health_Services_-_Chicago_Primary_Care_Community_Health_Centers.csv\"\nmap = gpd.read_file(filepath)\n```\n\n```{python}\n#clean the dataset and make it a geo dataframe\ndf = pd.DataFrame(map)\n\n# extract Coordinates\ndf[['address', 'coordinates']] = df['Address'].str.extract(r'^(.*)\\n\\((.*)\\)$')\ndf[['latitude', 'longitude']] = df['coordinates'].str.split(', ', expand=True)\n\n# convert Latitude and Longitude to Numeric\ndf['latitude'] = pd.to_numeric(df['latitude'])\ndf['longitude'] = pd.to_numeric(df['longitude'])\n\n# create Geometry Column\ndf['geometry'] = df.apply(lambda row: Point(row['longitude'], row['latitude']), axis=1)\n\n# convert to GeoDataFrame\ngdf = gpd.GeoDataFrame(df, geometry='geometry')\n\n# crop unnecessary columns if desired\ngdf = gdf.drop(columns=['Address', 'coordinates'])\n```\n\n```{python}\n# filter GeoDataFrame to keep points within Chicago's bounding box\npoint = gdf[\n    (gdf['latitude'] >= 41.64) & (gdf['latitude'] <= 42.02) &\n    (gdf['longitude'] >= -87.94) & (gdf['longitude'] <= -87.52)]\n# make a geojson file for shiny \npoint.to_file(\"point.geojson\", driver=\"GeoJSON\")\n\n```\n\n```{python}\n# Plot only the points in Chicago\npoint.plot(marker='o', color='green', markersize=5, figsize=(5, 5))\nplt.title(\"Map of Locations in Chicago\")\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.grid(True)\nplt.show()\n```\n\n```{python}\n# match the crs code for creating buffer\npoint = point.set_crs(epsg=4326)\npoint = point.to_crs(epsg=32616)\nchi_shp = chi_shp.to_crs(epsg=32616)\n```\n\n### Base Map with the points\n```{python}\n# create a base map with the shapefile\nax = chi_shp.plot(color='lightgrey', edgecolor='black', figsize=(5, 5), alpha=0.5)\n# overlay the points on the map\npoint.plot(ax=ax, marker='o', color='red', markersize=10)\nplt.title(\"Chicago Map with Points\")\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.show()\n```\n\n### Highlight the area with the health centers\n```{python}\n# highlight the area that has Chicago Primary Care Community Health Centers\n# spatial join\nhighlighted_areas = chi_shp.sjoin(point, how='inner', predicate='intersects')\n\n# keep only unique community areas\nhighlighted_areas = highlighted_areas.drop_duplicates(subset=chi_shp.geometry.name)\n\n# add a highlight flag\nchi_shp[\"has_points\"] = chi_shp.geometry.apply(lambda geom: geom in highlighted_areas.geometry.values)\n\n# plot shapefile, highlighting areas with points\ncustom_cmap = ListedColormap([\"yellow\", \"lightgrey\"])\nax = chi_shp.plot(\n    column=\"has_points\", \n    cmap=custom_cmap, \n    edgecolor=\"grey\",\n    figsize=(5, 5),\n    legend=True\n)\n\n# add the points to the map\npoint.plot(ax=ax, marker='o', color='red', markersize=5, label=\"Points\")\n\n# add labels and title\nplt.title(\"Highlighted Community Areas with Points\")\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.legend()\nplt.show()\n```\n\n### Combined Demographic and Health outcome data \n```{python}\n# fix the wrong community name \ndata[\"community_area_name\"] = data[\"community_area_name\"].replace(\n    {\"Montclaire\": \"Montclare\"})\n\n# Merge shp with the demographic dataset\nchi_shp_dem = chi_shp.merge(data, left_on=\"DISTITLE\",right_on = \"community_area_name\", how=\"outer\")\nchi_shp_dem = chi_shp_dem.to_crs(epsg=32616)\n\n# save the shape + demographic dataset for shiny\nchi_shp_dem.to_file(\"chi_shp_dem.geojson\", driver=\"GeoJSON\")\n\n```\n\n### Look at the 1 mile buffer for the primary care center \n\n```{python}\n# create the 1 mile buffer \npoint[\"buffer\"] = point.geometry.buffer(1609)\nbuffers = gpd.GeoDataFrame(point, geometry=\"buffer\", crs=point.crs)\n```\n\n#### Cancer mortality Rate in Community Area \n```{python}\nfig, ax = plt.subplots(1, 1, figsize=(5, 5))\nchi_shp_dem.plot(ax=ax, column=\"cancer_all_sites\", cmap=\"Reds\", edgecolor=\"lightgrey\",legend=True, label=\"Cancer Rates\")\nbuffers.plot(ax=ax, color=\"blue\", alpha=0.2, edgecolor=\"None\")\n\nplt.title(\" 1 Mile Buffers and Cancer Rates in Community Areas\")\nplt.legend()\nplt.show()\n```\n\n#### Diabetes rate in Community Area \n```{python}\nfig, ax = plt.subplots(1, 1, figsize=(5, 5))\nchi_shp_dem.plot(ax=ax, column=\"diabetes_related\", cmap=\"Blues\", edgecolor=\"lightgrey\",legend=True, label=\"Diabetes Rates\")\nbuffers.plot(ax=ax, color=\"blue\", alpha=0.2, edgecolor=\"None\")\n\nplt.title(\" 1 Mile Buffers and Diabetes in Community Areas\")\nplt.legend()\nplt.show()\n```\n\n#### Below Poverty Level in Community Area \n```{python}\nfig, ax = plt.subplots(1, 1, figsize=(5, 5))\nchi_shp_dem.plot(ax=ax, column=\"below_poverty_level\", cmap=\"Greens\", edgecolor=\"lightgrey\",legend=True, label=\"Below Poverty Level\")\nbuffers.plot(ax=ax, color=\"blue\", alpha=0.2, edgecolor=\"None\")\n\nplt.title(\" 1 Mile Buffers and Below Poverty Levelin Community Areas\")\nplt.legend()\nplt.show()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"notebook.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","title":"Relationship Between Socioeconomic Indicators and Health outcomes in Chicago ","author":"Ting Tsai & Sohyun Lim"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}